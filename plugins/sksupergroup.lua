{"changed":true,"filter":false,"title":"sksupergroup.lua","tooltip":"/ASD_KARBALA/plugins/sksupergroup.lua","value":"﻿--Begin supergrpup.lua\n--Check members #Add supergroup\nlocal function check_member_super(cb_extra, success, result)\n  local receiver = cb_extra.receiver\n  local data = cb_extra.data\n  local msg = cb_extra.msg\n  if success == 0 then\n\tsend_large_msg(receiver, \"Promote me to admin first!\")\n  end\n  for k,v in pairs(result) do\n    local member_id = v.peer_id\n    if member_id ~= our_id then\n      -- SuperGroup configuration\n      data[tostring(msg.to.id)] = {\n        group_type = 'SuperGroup',\n\t\tlong_id = msg.to.peer_id,\n\t\tmoderators = {},\n        set_owner = member_id ,\n        settings = {\n          set_name = string.gsub(msg.to.title, '_', ' '),\n\t\t  lock_arabic = 'no',\n\t\t  lock_link = \"no\",\n          flood = 'yes',\n\t\t  lock_spam = 'yes',\n\t\t  lock_sticker = 'no',\n\t\t  member = 'no',\n\t\t  public = 'no',\n\t\t  lock_rtl = 'no',\n\t\t  lock_tgservice = 'yes',\n\t\t  lock_contacts = 'no',\n\t\t  strict = 'no'\n        }\n      }\n      save_data(_config.moderation.data, data)\n      local groups = 'groups'\n      if not data[tostring(groups)] then\n        data[tostring(groups)] = {}\n        save_data(_config.moderation.data, data)\n      end\n      data[tostring(groups)][tostring(msg.to.id)] = msg.to.id\n      save_data(_config.moderation.data, data)\n\t  local text = 'SuperGroup has been added!'\n      return reply_msg(msg.id, text, ok_cb, false)\n    end\n  end\nend\n\n--Check Members #rem supergroup\nlocal function check_member_superrem(cb_extra, success, result)\n  local receiver = cb_extra.receiver\n  local data = cb_extra.data\n  local msg = cb_extra.msg\n  for k,v in pairs(result) do\n    local member_id = v.id\n    if member_id ~= our_id then\n\t  -- Group configuration removal\n      data[tostring(msg.to.id)] = nil\n      save_data(_config.moderation.data, data)\n      local groups = 'groups'\n      if not data[tostring(groups)] then\n        data[tostring(groups)] = nil\n        save_data(_config.moderation.data, data)\n      end\n      data[tostring(groups)][tostring(msg.to.id)] = nil\n      save_data(_config.moderation.data, data)\n\t  local text = 'SuperGroup has been removed'\n      return reply_msg(msg.id, text, ok_cb, false)\n    end\n  end\nend\n\n--Function to Add supergroup\nlocal function superadd(msg)\n\tlocal data = load_data(_config.moderation.data)\n\tlocal receiver = get_receiver(msg)\n    channel_get_users(receiver, check_member_super,{receiver = receiver, data = data, msg = msg})\nend\n\n--Function to remove supergroup\nlocal function superrem(msg)\n\tlocal data = load_data(_config.moderation.data)\n    local receiver = get_receiver(msg)\n    channel_get_users(receiver, check_member_superrem,{receiver = receiver, data = data, msg = msg})\nend\n\n--Get and output admins and bots in supergroup\nlocal function callback(cb_extra, success, result)\nlocal i = 1\nlocal chat_name = string.gsub(cb_extra.msg.to.print_name, \"_\", \" \")\nlocal member_type = cb_extra.member_type\nlocal text = member_type..\" for \"..chat_name..\":\\n\"\nfor k,v in pairsByKeys(result) do\nif not v.first_name then\n\tname = \" \"\nelse\n\tvname = v.first_name:gsub(\"‮\", \"\")\n\tname = vname:gsub(\"_\", \" \")\n\tend\n\t\ttext = text..\"\\n\"..i..\" - \"..name..\"[\"..v.peer_id..\"]\"\n\t\ti = i + 1\n\tend\n    send_large_msg(cb_extra.receiver, text)\nend\n\nlocal function callback_clean_bots (extra, success, result)\n\tlocal msg = extra.msg\n\tlocal receiver = 'channel#id'..msg.to.id\n\tlocal channel_id = msg.to.id\n\tfor k,v in pairs(result) do\n\t\tlocal bot_id = v.peer_id\n\t\tkick_user(bot_id,channel_id)\n\tend\nend\n\n--Get and output info about supergroup\nlocal function callback_info(cb_extra, success, result)\nlocal title =\"Info for SuperGroup: [\"..result.title..\"]\\n\\n\"\nlocal admin_num = \"Admin count: \"..result.admins_count..\"\\n\"\nlocal user_num = \"User count: \"..result.participants_count..\"\\n\"\nlocal kicked_num = \"Kicked user count: \"..result.kicked_count..\"\\n\"\nlocal channel_id = \"ID: \"..result.peer_id..\"\\n\"\nif result.username then\n\tchannel_username = \"Username: @\"..result.username\nelse\n\tchannel_username = \"\"\nend\nlocal text = title..admin_num..user_num..kicked_num..channel_id..channel_username\n    send_large_msg(cb_extra.receiver, text)\nend\n\n--Get and output members of supergroup\nlocal function callback_who(cb_extra, success, result)\nlocal text = \"Members for \"..cb_extra.receiver\nlocal i = 1\nfor k,v in pairsByKeys(result) do\nif not v.print_name then\n\tname = \" \"\nelse\n\tvname = v.print_name:gsub(\"‮\", \"\")\n\tname = vname:gsub(\"_\", \" \")\nend\n\tif v.username then\n\t\tusername = \" @\"..v.username\n\telse\n\t\tusername = \"\"\n\tend\n\ttext = text..\"\\n\"..i..\" - \"..name..\" \"..username..\" [ \"..v.peer_id..\" ]\\n\"\n\t--text = text..\"\\n\"..username\n\ti = i + 1\nend\n    local file = io.open(\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", \"w\")\n    file:write(text)\n    file:flush()\n    file:close()\n    send_document(cb_extra.receiver,\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", ok_cb, false)\n\tpost_msg(cb_extra.receiver, text, ok_cb, false)\nend\n\n--Get and output list of kicked users for supergroup\nlocal function callback_kicked(cb_extra, success, result)\n--vardump(result)\nlocal text = \"Kicked Members for SuperGroup \"..cb_extra.receiver..\"\\n\\n\"\nlocal i = 1\nfor k,v in pairsByKeys(result) do\nif not v.print_name then\n\tname = \" \"\nelse\n\tvname = v.print_name:gsub(\"‮\", \"\")\n\tname = vname:gsub(\"_\", \" \")\nend\n\tif v.username then\n\t\tname = name..\" @\"..v.username\n\tend\n\ttext = text..\"\\n\"..i..\" - \"..name..\" [ \"..v.peer_id..\" ]\\n\"\n\ti = i + 1\nend\n    local file = io.open(\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", \"w\")\n    file:write(text)\n    file:flush()\n    file:close()\n    send_document(cb_extra.receiver,\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", ok_cb, false)\n\t--send_large_msg(cb_extra.receiver, text)\nend\n\n--Begin supergroup locks\nlocal function lock_group_links(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_link_lock = data[tostring(target)]['settings']['lock_link']\n  if group_link_lock == 'yes' then\n    return 'Link posting is already locked'\n  else\n    data[tostring(target)]['settings']['lock_link'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Link posting has been locked'\n  end\nend\n\nlocal function unlock_group_links(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_link_lock = data[tostring(target)]['settings']['lock_link']\n  if group_link_lock == 'no' then\n    return 'Link posting is not locked'\n  else\n    data[tostring(target)]['settings']['lock_link'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Link posting has been unlocked'\n  end\nend\n\nlocal function lock_group_spam(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  if not is_owner(msg) then\n    return \"Owners only!\"\n  end\n  local group_spam_lock = data[tostring(target)]['settings']['lock_spam']\n  if group_spam_lock == 'yes' then\n    return 'SuperGroup spam is already locked'\n  else\n    data[tostring(target)]['settings']['lock_spam'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'SuperGroup spam has been locked'\n  end\nend\n\nlocal function unlock_group_spam(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_spam_lock = data[tostring(target)]['settings']['lock_spam']\n  if group_spam_lock == 'no' then\n    return 'SuperGroup spam is not locked'\n  else\n    data[tostring(target)]['settings']['lock_spam'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'SuperGroup spam has been unlocked'\n  end\nend\n\nlocal function lock_group_flood(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_flood_lock = data[tostring(target)]['settings']['flood']\n  if group_flood_lock == 'yes' then\n    return 'Flood is already locked'\n  else\n    data[tostring(target)]['settings']['flood'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Flood has been locked'\n  end\nend\n\nlocal function unlock_group_flood(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_flood_lock = data[tostring(target)]['settings']['flood']\n  if group_flood_lock == 'no' then\n    return 'Flood is not locked'\n  else\n    data[tostring(target)]['settings']['flood'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Flood has been unlocked'\n  end\nend\n\nlocal function lock_group_arabic(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic']\n  if group_arabic_lock == 'yes' then\n    return 'Arabic is already locked'\n  else\n    data[tostring(target)]['settings']['lock_arabic'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Arabic has been locked'\n  end\nend\n\nlocal function unlock_group_arabic(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic']\n  if group_arabic_lock == 'no' then\n    return 'Arabic/Persian is already unlocked'\n  else\n    data[tostring(target)]['settings']['lock_arabic'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Arabic/Persian has been unlocked'\n  end\nend\n\nlocal function lock_group_membermod(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_member_lock = data[tostring(target)]['settings']['lock_member']\n  if group_member_lock == 'yes' then\n    return 'SuperGroup members are already locked'\n  else\n    data[tostring(target)]['settings']['lock_member'] = 'yes'\n    save_data(_config.moderation.data, data)\n  end\n  return 'SuperGroup members has been locked'\nend\n\nlocal function unlock_group_membermod(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_member_lock = data[tostring(target)]['settings']['lock_member']\n  if group_member_lock == 'no' then\n    return 'SuperGroup members are not locked'\n  else\n    data[tostring(target)]['settings']['lock_member'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'SuperGroup members has been unlocked'\n  end\nend\n\nlocal function lock_group_rtl(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl']\n  if group_rtl_lock == 'yes' then\n    return 'RTL is already locked'\n  else\n    data[tostring(target)]['settings']['lock_rtl'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'RTL has been locked'\n  end\nend\n\nlocal function unlock_group_rtl(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl']\n  if group_rtl_lock == 'no' then\n    return 'RTL is already unlocked'\n  else\n    data[tostring(target)]['settings']['lock_rtl'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'RTL has been unlocked'\n  end\nend\n\nlocal function lock_group_tgservice(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_tgservice_lock = data[tostring(target)]['settings']['lock_tgservice']\n  if group_tgservice_lock == 'yes' then\n    return 'Tgservice is already locked'\n  else\n    data[tostring(target)]['settings']['lock_tgservice'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Tgservice has been locked'\n  end\nend\n\nlocal function unlock_group_tgservice(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_tgservice_lock = data[tostring(target)]['settings']['lock_tgservice']\n  if group_tgservice_lock == 'no' then\n    return 'TgService Is Not Locked!'\n  else\n    data[tostring(target)]['settings']['lock_tgservice'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Tgservice has been unlocked'\n  end\nend\n\nlocal function lock_group_sticker(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker']\n  if group_sticker_lock == 'yes' then\n    return 'Sticker posting is already locked'\n  else\n    data[tostring(target)]['settings']['lock_sticker'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Sticker posting has been locked'\n  end\nend\n\nlocal function unlock_group_sticker(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker']\n  if group_sticker_lock == 'no' then\n    return 'Sticker posting is already unlocked'\n  else\n    data[tostring(target)]['settings']['lock_sticker'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Sticker posting has been unlocked'\n  end\nend\n\nlocal function lock_group_contacts(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_contacts_lock = data[tostring(target)]['settings']['lock_contacts']\n  if group_contacts_lock == 'yes' then\n    return 'Contact posting is already locked'\n  else\n    data[tostring(target)]['settings']['lock_contacts'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Contact posting has been locked'\n  end\nend\n\nlocal function unlock_group_contacts(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_contacts_lock = data[tostring(target)]['settings']['lock_contacts']\n  if group_contacts_lock == 'no' then\n    return 'Contact posting is already unlocked'\n  else\n    data[tostring(target)]['settings']['lock_contacts'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Contact posting has been unlocked'\n  end\nend\n\nlocal function enable_strict_rules(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_strict_lock = data[tostring(target)]['settings']['strict']\n  if group_strict_lock == 'yes' then\n    return 'Settings are already strictly enforced'\n  else\n    data[tostring(target)]['settings']['strict'] = 'yes'\n    save_data(_config.moderation.data, data)\n    return 'Settings will be strictly enforced'\n  end\nend\n\nlocal function disable_strict_rules(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_strict_lock = data[tostring(target)]['settings']['strict']\n  if group_strict_lock == 'no' then\n    return 'Settings are not strictly enforced'\n  else\n    data[tostring(target)]['settings']['strict'] = 'no'\n    save_data(_config.moderation.data, data)\n    return 'Settings will not be strictly enforced'\n  end\nend\n--End supergroup locks\n\n--'Set supergroup rules' function\nlocal function set_rulesmod(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local data_cat = 'rules'\n  data[tostring(target)][data_cat] = rules\n  save_data(_config.moderation.data, data)\n  return 'SuperGroup rules set'\nend\n\n--'Get supergroup rules' function\nlocal function get_rules(msg, data)\n  local data_cat = 'rules'\n  if not data[tostring(msg.to.id)][data_cat] then\n    return 'No rules available.'\n  end\n  local rules = data[tostring(msg.to.id)][data_cat]\n  local group_name = data[tostring(msg.to.id)]['settings']['set_name']\n  local rules = group_name..' rules:\\n\\n'..rules:gsub(\"/n\", \" \")\n  return rules\nend\n\n--Set supergroup to public or not public function\nlocal function set_public_membermod(msg, data, target)\n  if not is_momod(msg) then\n    return \"For moderators only!\"\n  end\n  local group_public_lock = data[tostring(target)]['settings']['public']\n  local long_id = data[tostring(target)]['long_id']\n  if not long_id then\n\tdata[tostring(target)]['long_id'] = msg.to.peer_id\n\tsave_data(_config.moderation.data, data)\n  end\n  if group_public_lock == 'yes' then\n    return 'Group is already public'\n  else\n    data[tostring(target)]['settings']['public'] = 'yes'\n    save_data(_config.moderation.data, data)\n  end\n  return 'SuperGroup is now: public'\nend\n\nlocal function unset_public_membermod(msg, data, target)\n  if not is_momod(msg) then\n    return\n  end\n  local group_public_lock = data[tostring(target)]['settings']['public']\n  local long_id = data[tostring(target)]['long_id']\n  if not long_id then\n\tdata[tostring(target)]['long_id'] = msg.to.peer_id\n\tsave_data(_config.moderation.data, data)\n  end\n  if group_public_lock == 'no' then\n    return 'Group is not public'\n  else\n    data[tostring(target)]['settings']['public'] = 'no'\n\tdata[tostring(target)]['long_id'] = msg.to.long_id\n    save_data(_config.moderation.data, data)\n    return 'SuperGroup is now: not public'\n  end\nend\n\n--Show supergroup settings; function\nfunction show_supergroup_settingsmod(msg, target)\n \tif not is_momod(msg) then\n    \treturn\n  \tend\n\tlocal data = load_data(_config.moderation.data)\n    if data[tostring(target)] then\n     \tif data[tostring(target)]['settings']['flood_msg_max'] then\n        \tNUM_MSG_MAX = tonumber(data[tostring(target)]['settings']['flood_msg_max'])\n        \tprint('custom'..NUM_MSG_MAX)\n      \telse\n        \tNUM_MSG_MAX = 5\n      \tend\n    end\n\tif data[tostring(target)]['settings'] then\n\t\tif not data[tostring(target)]['settings']['public'] then\n\t\t\tdata[tostring(target)]['settings']['public'] = 'no'\n\t\tend\n\tend\n\tif data[tostring(target)]['settings'] then\n\t\tif not data[tostring(target)]['settings']['lock_rtl'] then\n\t\t\tdata[tostring(target)]['settings']['lock_rtl'] = 'no'\n\t\tend\nend\n      if data[tostring(target)]['settings'] then\n\t\tif not data[tostring(target)]['settings']['lock_tgservice'] then\n\t\t\tdata[tostring(target)]['settings']['lock_tgservice'] = 'no'\n\t\tend\n\tend\n\tif data[tostring(target)]['settings'] then\n\t\tif not data[tostring(target)]['settings']['lock_member'] then\n\t\t\tdata[tostring(target)]['settings']['lock_member'] = 'no'\n\t\tend\n\tend\n  local settings = data[tostring(target)]['settings']\n  local text = \"SuperGroup settings:\\nLock links : \"..settings.lock_link..\"\\nLock flood: \"..settings.flood..\"\\nFlood sensitivity : \"..NUM_MSG_MAX..\"\\nLock spam: \"..settings.lock_spam..\"\\nLock Arabic: \"..settings.lock_arabic..\"\\nLock Member: \"..settings.lock_member..\"\\nLock RTL: \"..settings.lock_rtl..\"\\nLock Tgservice : \"..settings.lock_tgservice..\"\\nLock sticker: \"..settings.lock_sticker..\"\\nPublic: \"..settings.public..\"\\nStrict settings: \"..settings.strict\n  return text\nend\n\nlocal function promote_admin(receiver, member_username, user_id)\n  local data = load_data(_config.moderation.data)\n  local group = string.gsub(receiver, 'channel#id', '')\n  local member_tag_username = string.gsub(member_username, '@', '(at)')\n  if not data[group] then\n    return\n  end\n  if data[group]['moderators'][tostring(user_id)] then\n    return send_large_msg(receiver, member_username..' is already a moderator.')\n  end\n  data[group]['moderators'][tostring(user_id)] = member_tag_username\n  save_data(_config.moderation.data, data)\nend\n\nlocal function demote_admin(receiver, member_username, user_id)\n  local data = load_data(_config.moderation.data)\n  local group = string.gsub(receiver, 'channel#id', '')\n  if not data[group] then\n    return\n  end\n  if not data[group]['moderators'][tostring(user_id)] then\n    return send_large_msg(receiver, member_tag_username..' is not a moderator.')\n  end\n  data[group]['moderators'][tostring(user_id)] = nil\n  save_data(_config.moderation.data, data)\nend\n\nlocal function promote2(receiver, member_username, user_id)\n  local data = load_data(_config.moderation.data)\n  local group = string.gsub(receiver, 'channel#id', '')\n  local member_tag_username = string.gsub(member_username, '@', '(at)')\n  if not data[group] then\n    return send_large_msg(receiver, 'SuperGroup is not added.')\n  end\n  if data[group]['moderators'][tostring(user_id)] then\n    return send_large_msg(receiver, member_username..' is already a moderator.')\n  end\n  data[group]['moderators'][tostring(user_id)] = member_tag_username\n  save_data(_config.moderation.data, data)\n  send_large_msg(receiver, member_username..' has been promoted.')\nend\n\nlocal function demote2(receiver, member_username, user_id)\n  local data = load_data(_config.moderation.data)\n  local group = string.gsub(receiver, 'channel#id', '')\n  if not data[group] then\n    return send_large_msg(receiver, 'Group is not added.')\n  end\n  if not data[group]['moderators'][tostring(user_id)] then\n    return send_large_msg(receiver, member_tag_username..' is not a moderator.')\n  end\n  data[group]['moderators'][tostring(user_id)] = nil\n  save_data(_config.moderation.data, data)\n  send_large_msg(receiver, member_username..' has been demoted.')\nend\n\nlocal function modlist(msg)\n  local data = load_data(_config.moderation.data)\n  local groups = \"groups\"\n  if not data[tostring(groups)][tostring(msg.to.id)] then\n    return 'SuperGroup is not added.'\n  end\n  -- determine if table is empty\n  if next(data[tostring(msg.to.id)]['moderators']) == nil then\n    return 'No moderator in this group.'\n  end\n  local i = 1\n  local message = '\\nList of moderators for ' .. string.gsub(msg.to.print_name, '_', ' ') .. ':\\n'\n  for k,v in pairs(data[tostring(msg.to.id)]['moderators']) do\n    message = message ..i..' - '..v..' [' ..k.. '] \\n'\n    i = i + 1\n  end\n  return message\nend\n\n-- Start by reply actions\nfunction get_message_callback(extra, success, result)\n\tlocal get_cmd = extra.get_cmd\n\tlocal msg = extra.msg\n\tlocal data = load_data(_config.moderation.data)\n\tlocal print_name = user_print_name(msg.from):gsub(\"‮\", \"\")\n\tlocal name_log = print_name:gsub(\"_\", \" \")\n    if get_cmd == \"id\" and not result.action then\n\t\tlocal channel = 'channel#id'..result.to.peer_id\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for: [\"..result.from.peer_id..\"]\")\n\t\tid1 = send_large_msg(channel, result.from.peer_id)\n\telseif get_cmd == 'id' and result.action then\n\t\tlocal action = result.action.type\n\t\tif action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then\n\t\t\tif result.action.user then\n\t\t\t\tuser_id = result.action.user.peer_id\n\t\t\telse\n\t\t\t\tuser_id = result.peer_id\n\t\t\tend\n\t\t\tlocal channel = 'channel#id'..result.to.peer_id\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id by service msg for: [\"..user_id..\"]\")\n\t\t\tid1 = send_large_msg(channel, user_id)\n\t\tend\n    elseif get_cmd == \"idfrom\" then\n\t\tlocal channel = 'channel#id'..result.to.peer_id\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for msg fwd from: [\"..result.fwd_from.peer_id..\"]\")\n\t\tid2 = send_large_msg(channel, result.fwd_from.peer_id)\n    elseif get_cmd == 'channel_block' and not result.action then\n\t\tlocal member_id = result.from.peer_id\n\t\tlocal channel_id = result.to.peer_id\n    if member_id == msg.from.id then\n      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")\n    end\n    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then\n\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")\n    end\n    if is_admin2(member_id) then\n         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")\n    end\n\t\t--savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply\")\n\t\tkick_user(member_id, channel_id)\n\telseif get_cmd == 'channel_block' and result.action and result.action.type == 'chat_add_user' then\n\t\tlocal user_id = result.action.user.peer_id\n\t\tlocal channel_id = result.to.peer_id\n    if member_id == msg.from.id then\n      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")\n    end\n    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then\n\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")\n    end\n    if is_admin2(member_id) then\n         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")\n    end\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply to sev. msg.\")\n\t\tkick_user(user_id, channel_id)\n\telseif get_cmd == \"del\" then\n\t\tdelete_msg(result.id, ok_cb, false)\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] deleted a message by reply\")\n\telseif get_cmd == \"setadmin\" then\n\t\tlocal user_id = result.from.peer_id\n\t\tlocal channel_id = \"channel#id\"..result.to.peer_id\n\t\tchannel_set_admin(channel_id, \"user#id\"..user_id, ok_cb, false)\n\t\tif result.from.username then\n\t\t\ttext = \"@\"..result.from.username..\" set as an admin\"\n\t\telse\n\t\t\ttext = \"[ \"..user_id..\" ]set as an admin\"\n\t\tend\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..user_id..\"] as admin by reply\")\n\t\tsend_large_msg(channel_id, text)\n\telseif get_cmd == \"demoteadmin\" then\n\t\tlocal user_id = result.from.peer_id\n\t\tlocal channel_id = \"channel#id\"..result.to.peer_id\n\t\tif is_admin2(result.from.peer_id) then\n\t\t\treturn send_large_msg(channel_id, \"You can't demote global admins!\")\n\t\tend\n\t\tchannel_demote(channel_id, \"user#id\"..user_id, ok_cb, false)\n\t\tif result.from.username then\n\t\t\ttext = \"@\"..result.from.username..\" has been demoted from admin\"\n\t\telse\n\t\t\ttext = \"[ \"..user_id..\" ] has been demoted from admin\"\n\t\tend\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted: [\"..user_id..\"] from admin by reply\")\n\t\tsend_large_msg(channel_id, text)\n\telseif get_cmd == \"setowner\" then\n\t\tlocal group_owner = data[tostring(result.to.peer_id)]['set_owner']\n\t\tif group_owner then\n\t\tlocal channel_id = 'channel#id'..result.to.peer_id\n\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then\n\t\t\t\tlocal user = \"user#id\"..group_owner\n\t\t\t\tchannel_demote(channel_id, user, ok_cb, false)\n\t\t\tend\n\t\t\tlocal user_id = \"user#id\"..result.from.peer_id\n\t\t\tchannel_set_admin(channel_id, user_id, ok_cb, false)\n\t\t\tdata[tostring(result.to.peer_id)]['set_owner'] = tostring(result.from.peer_id)\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..result.from.peer_id..\"] as owner by reply\")\n\t\t\tif result.from.username then\n\t\t\t\ttext = \"@\"..result.from.username..\" [ \"..result.from.peer_id..\" ] added as owner\"\n\t\t\telse\n\t\t\t\ttext = \"[ \"..result.from.peer_id..\" ] added as owner\"\n\t\t\tend\n\t\t\tsend_large_msg(channel_id, text)\n\t\tend\n\telseif get_cmd == \"promote\" then\n\t\tlocal receiver = result.to.peer_id\n\t\tlocal full_name = (result.from.first_name or '')..' '..(result.from.last_name or '')\n\t\tlocal member_name = full_name:gsub(\"‮\", \"\")\n\t\tlocal member_username = member_name:gsub(\"_\", \" \")\n\t\tif result.from.username then\n\t\t\tmember_username = '@'.. result.from.username\n\t\tend\n\t\tlocal member_id = result.from.peer_id\n\t\tif result.to.peer_type == 'channel' then\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted mod: @\"..member_username..\"[\"..result.from.peer_id..\"] by reply\")\n\t\tpromote2(\"channel#id\"..result.to.peer_id, member_username, member_id)\n\t    --channel_set_mod(channel_id, user, ok_cb, false)\n\t\tend\n\telseif get_cmd == \"demote\" then\n\t\tlocal full_name = (result.from.first_name or '')..' '..(result.from.last_name or '')\n\t\tlocal member_name = full_name:gsub(\"‮\", \"\")\n\t\tlocal member_username = member_name:gsub(\"_\", \" \")\n    if result.from.username then\n\t\tmember_username = '@'.. result.from.username\n    end\n\t\tlocal member_id = result.from.peer_id\n\t\t--local user = \"user#id\"..result.peer_id\n\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted mod: @\"..member_username..\"[\"..user_id..\"] by reply\")\n\t\tdemote2(\"channel#id\"..result.to.peer_id, member_username, member_id)\n\t\t--channel_demote(channel_id, user, ok_cb, false)\n\telseif get_cmd == 'mute_user' then\n\t\tif result.service then\n\t\t\tlocal action = result.action.type\n\t\t\tif action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then\n\t\t\t\tif result.action.user then\n\t\t\t\t\tuser_id = result.action.user.peer_id\n\t\t\t\tend\n\t\t\tend\n\t\t\tif action == 'chat_add_user_link' then\n\t\t\t\tif result.from then\n\t\t\t\t\tuser_id = result.from.peer_id\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tuser_id = result.from.peer_id\n\t\tend\n\t\tlocal receiver = extra.receiver\n\t\tlocal chat_id = msg.to.id\n\t\tprint(user_id)\n\t\tprint(chat_id)\n\t\tif is_muted_user(chat_id, user_id) then\n\t\t\tunmute_user(chat_id, user_id)\n\t\t\tsend_large_msg(receiver, \"[\"..user_id..\"] removed from the muted user list\")\n\t\telseif is_admin1(msg) then\n\t\t\tmute_user(chat_id, user_id)\n\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] added to the muted user list\")\n\t\tend\n\tend\nend\n-- End by reply actions\n\n--By ID actions\nlocal function cb_user_info(extra, success, result)\n\tlocal receiver = extra.receiver\n\tlocal user_id = result.peer_id\n\tlocal get_cmd = extra.get_cmd\n\tlocal data = load_data(_config.moderation.data)\n\t--[[if get_cmd == \"setadmin\" then\n\t\tlocal user_id = \"user#id\"..result.peer_id\n\t\tchannel_set_admin(receiver, user_id, ok_cb, false)\n\t\tif result.username then\n\t\t\ttext = \"@\"..result.username..\" has been set as an admin\"\n\t\telse\n\t\t\ttext = \"[ \"..result.peer_id..\" ] has been set as an admin\"\n\t\tend\n\t\t\tsend_large_msg(receiver, text)]]\n\tif get_cmd == \"demoteadmin\" then\n\t\tif is_admin2(result.peer_id) then\n\t\t\treturn send_large_msg(receiver, \"You can't demote global admins!\")\n\t\tend\n\t\tlocal user_id = \"user#id\"..result.peer_id\n\t\tchannel_demote(receiver, user_id, ok_cb, false)\n\t\tif result.username then\n\t\t\ttext = \"@\"..result.username..\" has been demoted from admin\"\n\t\t\tsend_large_msg(receiver, text)\n\t\telse\n\t\t\ttext = \"[ \"..result.peer_id..\" ] has been demoted from admin\"\n\t\t\tsend_large_msg(receiver, text)\n\t\tend\n\telseif get_cmd == \"promote\" then\n\t\tif result.username then\n\t\t\tmember_username = \"@\"..result.username\n\t\telse\n\t\t\tmember_username = string.gsub(result.print_name, '_', ' ')\n\t\tend\n\t\tpromote2(receiver, member_username, user_id)\n\telseif get_cmd == \"demote\" then\n\t\tif result.username then\n\t\t\tmember_username = \"@\"..result.username\n\t\telse\n\t\t\tmember_username = string.gsub(result.print_name, '_', ' ')\n\t\tend\n\t\tdemote2(receiver, member_username, user_id)\n\tend\nend\n\n-- Begin resolve username actions\nlocal function callbackres(extra, success, result)\n  local member_id = result.peer_id\n  local member_username = \"@\"..result.username\n  local get_cmd = extra.get_cmd\n\tif get_cmd == \"res\" then\n\t\tlocal user = result.peer_id\n\t\tlocal name = string.gsub(result.print_name, \"_\", \" \")\n\t\tlocal channel = 'channel#id'..extra.channelid\n\t\tsend_large_msg(channel, user..'\\n'..name)\n\t\treturn user\n\telseif get_cmd == \"id\" then\n\t\tlocal user = result.peer_id\n\t\tlocal channel = 'channel#id'..extra.channelid\n\t\tsend_large_msg(channel, user)\n\t\treturn user\n  elseif get_cmd == \"invite\" then\n    local receiver = extra.channel\n    local user_id = \"user#id\"..result.peer_id\n    channel_invite(receiver, user_id, ok_cb, false)\n\t--[[elseif get_cmd == \"channel_block\" then\n\t\tlocal user_id = result.peer_id\n\t\tlocal channel_id = extra.channelid\n    local sender = extra.sender\n    if member_id == sender then\n      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")\n    end\n\t\tif is_momod2(member_id, channel_id) and not is_admin2(sender) then\n\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")\n    end\n    if is_admin2(member_id) then\n         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")\n    end\n\t\tkick_user(user_id, channel_id)\n\telseif get_cmd == \"setadmin\" then\n\t\tlocal user_id = \"user#id\"..result.peer_id\n\t\tlocal channel_id = extra.channel\n\t\tchannel_set_admin(channel_id, user_id, ok_cb, false)\n\t\tif result.username then\n\t\t\ttext = \"@\"..result.username..\" has been set as an admin\"\n\t\t\tsend_large_msg(channel_id, text)\n\t\telse\n\t\t\ttext = \"@\"..result.peer_id..\" has been set as an admin\"\n\t\t\tsend_large_msg(channel_id, text)\n\t\tend\n\telseif get_cmd == \"setowner\" then\n\t\tlocal receiver = extra.channel\n\t\tlocal channel = string.gsub(receiver, 'channel#id', '')\n\t\tlocal from_id = extra.from_id\n\t\tlocal group_owner = data[tostring(channel)]['set_owner']\n\t\tif group_owner then\n\t\t\tlocal user = \"user#id\"..group_owner\n\t\t\tif not is_admin2(group_owner) and not is_support(group_owner) then\n\t\t\t\tchannel_demote(receiver, user, ok_cb, false)\n\t\t\tend\n\t\t\tlocal user_id = \"user#id\"..result.peer_id\n\t\t\tchannel_set_admin(receiver, user_id, ok_cb, false)\n\t\t\tdata[tostring(channel)]['set_owner'] = tostring(result.peer_id)\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\tsavelog(channel, name_log..\" [\"..from_id..\"] set [\"..result.peer_id..\"] as owner by username\")\n\t\tif result.username then\n\t\t\ttext = member_username..\" [ \"..result.peer_id..\" ] added as owner\"\n\t\telse\n\t\t\ttext = \"[ \"..result.peer_id..\" ] added as owner\"\n\t\tend\n\t\tsend_large_msg(receiver, text)\n  end]]\n\telseif get_cmd == \"promote\" then\n\t\tlocal receiver = extra.channel\n\t\tlocal user_id = result.peer_id\n\t\t--local user = \"user#id\"..result.peer_id\n\t\tpromote2(receiver, member_username, user_id)\n\t\t--channel_set_mod(receiver, user, ok_cb, false)\n\telseif get_cmd == \"demote\" then\n\t\tlocal receiver = extra.channel\n\t\tlocal user_id = result.peer_id\n\t\tlocal user = \"user#id\"..result.peer_id\n\t\tdemote2(receiver, member_username, user_id)\n\telseif get_cmd == \"demoteadmin\" then\n\t\tlocal user_id = \"user#id\"..result.peer_id\n\t\tlocal channel_id = extra.channel\n\t\tif is_admin2(result.peer_id) then\n\t\t\treturn send_large_msg(channel_id, \"You can't demote global admins!\")\n\t\tend\n\t\tchannel_demote(channel_id, user_id, ok_cb, false)\n\t\tif result.username then\n\t\t\ttext = \"@\"..result.username..\" has been demoted from admin\"\n\t\t\tsend_large_msg(channel_id, text)\n\t\telse\n\t\t\ttext = \"@\"..result.peer_id..\" has been demoted from admin\"\n\t\t\tsend_large_msg(channel_id, text)\n\t\tend\n\t\tlocal receiver = extra.channel\n\t\tlocal user_id = result.peer_id\n\t\tdemote_admin(receiver, member_username, user_id)\n\telseif get_cmd == 'mute_user' then\n\t\tlocal user_id = result.peer_id\n\t\tlocal receiver = extra.receiver\n\t\tlocal chat_id = string.gsub(receiver, 'channel#id', '')\n\t\tif is_muted_user(chat_id, user_id) then\n\t\t\tunmute_user(chat_id, user_id)\n\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] removed from muted user list\")\n\t\telseif is_owner(extra.msg) then\n\t\t\tmute_user(chat_id, user_id)\n\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] added to muted user list\")\n\t\tend\n\tend\nend\n--End resolve username actions\n\n--Begin non-channel_invite username actions\nlocal function in_channel_cb(cb_extra, success, result)\n  local get_cmd = cb_extra.get_cmd\n  local receiver = cb_extra.receiver\n  local msg = cb_extra.msg\n  local data = load_data(_config.moderation.data)\n  local print_name = user_print_name(cb_extra.msg.from):gsub(\"‮\", \"\")\n  local name_log = print_name:gsub(\"_\", \" \")\n  local member = cb_extra.username\n  local memberid = cb_extra.user_id\n  if member then\n    text = 'No user @'..member..' in this SuperGroup.'\n  else\n    text = 'No user ['..memberid..'] in this SuperGroup.'\n  end\nif get_cmd == \"channel_block\" then\n  for k,v in pairs(result) do\n    vusername = v.username\n    vpeer_id = tostring(v.peer_id)\n    if vusername == member or vpeer_id == memberid then\n     local user_id = v.peer_id\n     local channel_id = cb_extra.msg.to.id\n     local sender = cb_extra.msg.from.id\n      if user_id == sender then\n        return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")\n      end\n      if is_momod2(user_id, channel_id) and not is_admin2(sender) then\n        return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")\n      end\n      if is_admin2(user_id) then\n        return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")\n      end\n      if v.username then\n        text = \"\"\n        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..v.username..\" [\"..v.peer_id..\"]\")\n      else\n        text = \"\"\n        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..v.peer_id..\"]\")\n      end\n      kick_user(user_id, channel_id)\n      return\n    end\n  end\nelseif get_cmd == \"setadmin\" then\n   for k,v in pairs(result) do\n    vusername = v.username\n    vpeer_id = tostring(v.peer_id)\n    if vusername == member or vpeer_id == memberid then\n      local user_id = \"user#id\"..v.peer_id\n      local channel_id = \"channel#id\"..cb_extra.msg.to.id\n      channel_set_admin(channel_id, user_id, ok_cb, false)\n      if v.username then\n        text = \"@\"..v.username..\" [\"..v.peer_id..\"] has been set as an admin\"\n        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..v.username..\" [\"..v.peer_id..\"]\")\n      else\n        text = \"[\"..v.peer_id..\"] has been set as an admin\"\n        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin \"..v.peer_id)\n      end\n\t  if v.username then\n\t\tmember_username = \"@\"..v.username\n\t  else\n\t\tmember_username = string.gsub(v.print_name, '_', ' ')\n\t  end\n\t\tlocal receiver = channel_id\n\t\tlocal user_id = v.peer_id\n\t\tpromote_admin(receiver, member_username, user_id)\n\n    end\n    send_large_msg(channel_id, text)\n    return\n end\n elseif get_cmd == 'setowner' then\n\tfor k,v in pairs(result) do\n\t\tvusername = v.username\n\t\tvpeer_id = tostring(v.peer_id)\n\t\tif vusername == member or vpeer_id == memberid then\n\t\t\tlocal channel = string.gsub(receiver, 'channel#id', '')\n\t\t\tlocal from_id = cb_extra.msg.from.id\n\t\t\tlocal group_owner = data[tostring(channel)]['set_owner']\n\t\t\tif group_owner then\n\t\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then\n\t\t\t\t\tlocal user = \"user#id\"..group_owner\n\t\t\t\t\tchannel_demote(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\t\t\tlocal user_id = \"user#id\"..v.peer_id\n\t\t\t\t\tchannel_set_admin(receiver, user_id, ok_cb, false)\n\t\t\t\t\tdata[tostring(channel)]['set_owner'] = tostring(v.peer_id)\n\t\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\t\tsavelog(channel, name_log..\"[\"..from_id..\"] set [\"..v.peer_id..\"] as owner by username\")\n\t\t\t\tif result.username then\n\t\t\t\t\ttext = member_username..\" [\"..v.peer_id..\"] added as owner\"\n\t\t\t\telse\n\t\t\t\t\ttext = \"[\"..v.peer_id..\"] added as owner\"\n\t\t\t\tend\n\t\t\tend\n\t\telseif memberid and vusername ~= member and vpeer_id ~= memberid then\n\t\t\tlocal channel = string.gsub(receiver, 'channel#id', '')\n\t\t\tlocal from_id = cb_extra.msg.from.id\n\t\t\tlocal group_owner = data[tostring(channel)]['set_owner']\n\t\t\tif group_owner then\n\t\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then\n\t\t\t\t\tlocal user = \"user#id\"..group_owner\n\t\t\t\t\tchannel_demote(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\t\tdata[tostring(channel)]['set_owner'] = tostring(memberid)\n\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\tsavelog(channel, name_log..\"[\"..from_id..\"] set [\"..memberid..\"] as owner by username\")\n\t\t\t\ttext = \"[\"..memberid..\"] added as owner\"\n\t\t\tend\n\t\tend\n\tend\n end\nsend_large_msg(receiver, text)\nend\n--End non-channel_invite username actions\n\n--'Set supergroup photo' function\nlocal function set_supergroup_photo(msg, success, result)\n  local data = load_data(_config.moderation.data)\n  if not data[tostring(msg.to.id)] then\n      return\n  end\n  local receiver = get_receiver(msg)\n  if success then\n    local file = 'data/photos/channel_photo_'..msg.to.id..'.jpg'\n    print('File downloaded to:', result)\n    os.rename(result, file)\n    print('File moved to:', file)\n    channel_set_photo(receiver, file, ok_cb, false)\n    data[tostring(msg.to.id)]['settings']['set_photo'] = file\n    save_data(_config.moderation.data, data)\n    send_large_msg(receiver, 'Photo saved!', ok_cb, false)\n  else\n    print('Error downloading: '..msg.id)\n    send_large_msg(receiver, 'Failed, please try again!', ok_cb, false)\n  end\nend\n\n--Run function\nlocal function run(msg, matches)\n\tif msg.to.type == 'chat' then\n\t\tif matches[1] == 'tosuper' then\n\t\t\tif not is_admin1(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tlocal receiver = get_receiver(msg)\n\t\t\tchat_upgrade(receiver, ok_cb, false)\n\t\tend\n\telseif msg.to.type == 'channel'then\n\t\tif matches[1] == 'tosuper' then\n\t\t\tif not is_admin1(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\treturn \"Already a SuperGroup\"\n\t\tend\n\tend\n\tif msg.to.type == 'channel' then\n\tlocal support_id = msg.from.id\n\tlocal receiver = get_receiver(msg)\n\tlocal print_name = user_print_name(msg.from):gsub(\"‮\", \"\")\n\tlocal name_log = print_name:gsub(\"_\", \" \")\n\tlocal data = load_data(_config.moderation.data)\n\t\tif matches[1] == 'add' and not matches[2] then\n\t\t\tif not is_admin1(msg) and not is_support(support_id) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif is_super_group(msg) then\n\t\t\t\treturn reply_msg(msg.id, 'SuperGroup is already added.', ok_cb, false)\n\t\t\tend\n\t\t\tprint(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") added\")\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added SuperGroup\")\n\t\t\tsuperadd(msg)\n\t\t\tset_mutes(msg.to.id)\n\t\t\tchannel_set_admin(receiver, 'user#id'..msg.from.id, ok_cb, false)\n\t\tend\n\n\t\tif matches[1] == 'rem' and is_admin1(msg) and not matches[2] then\n\t\t\tif not is_super_group(msg) then\n\t\t\t\treturn reply_msg(msg.id, 'SuperGroup is not added.', ok_cb, false)\n\t\t\tend\n\t\t\tprint(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") removed\")\n\t\t\tsuperrem(msg)\n\t\t\trem_mutes(msg.to.id)\n\t\tend\n\n\t\tif not data[tostring(msg.to.id)] then\n\t\t\treturn\n\t\tend\n\t\tif matches[1] == \"info\" then\n\t\t\tif not is_owner(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup info\")\n\t\t\tchannel_info(receiver, callback_info, {receiver = receiver, msg = msg})\n\t\tend\n\n\t\tif matches[1] == \"admins\" then\n\t\t\tif not is_owner(msg) and not is_support(msg.from.id) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tmember_type = 'Admins'\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup Admins list\")\n\t\t\tadmins = channel_get_admins(receiver,callback, {receiver = receiver, msg = msg, member_type = member_type})\n\t\tend\n\n\t\tif matches[1] == \"owner\" then\n\t\t\tlocal group_owner = data[tostring(msg.to.id)]['set_owner']\n\t\t\tif not group_owner then\n\t\t\t\treturn \"no owner,ask admins in support groups to set owner for your SuperGroup\"\n\t\t\tend\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] used /owner\")\n\t\t\treturn \"SuperGroup owner is [\"..group_owner..']'\n\t\tend\n\n\t\tif matches[1] == \"modlist\" then\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group modlist\")\n\t\t\treturn modlist(msg)\n\t\t\t-- channel_get_admins(receiver,callback, {receiver = receiver})\n\t\tend\n\n\t\tif matches[1] == \"bots\" and is_momod(msg) then\n\t\t\tmember_type = 'Bots'\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup bots list\")\n\t\t\tchannel_get_bots(receiver, callback, {receiver = receiver, msg = msg, member_type = member_type})\n\t\tend\n\n\t\tif matches[1] == \"who\" and not matches[2] and is_momod(msg) then\n\t\t\tlocal user_id = msg.from.peer_id\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup users list\")\n\t\t\tchannel_get_users(receiver, callback_who, {receiver = receiver})\n\t\tend\n\n\t\tif matches[1] == \"kicked\" and is_momod(msg) then\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested Kicked users list\")\n\t\t\tchannel_get_kicked(receiver, callback_kicked, {receiver = receiver})\n\t\tend\n\n\t\tif matches[1] == 'del' and is_momod(msg) then\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'del',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tdelete_msg(msg.id, ok_cb, false)\n\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'block' and is_momod(msg) then\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'channel_block',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'block' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t\t--[[local user_id = matches[2]\n\t\t\t\tlocal channel_id = msg.to.id\n\t\t\t\tif is_momod2(user_id, channel_id) and not is_admin2(user_id) then\n\t\t\t\t\treturn send_large_msg(receiver, \"You can't kick mods/owner/admins\")\n\t\t\t\tend\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [ user#id\"..user_id..\" ]\")\n\t\t\t\tkick_user(user_id, channel_id)]]\n\t\t\t\tlocal get_cmd = 'channel_block'\n\t\t\t\tlocal msg = msg\n\t\t\t\tlocal user_id = matches[2]\n\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})\n\t\t\telseif matches[1] == \"block\" and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t--[[local cbres_extra = {\n\t\t\t\t\tchannelid = msg.to.id,\n\t\t\t\t\tget_cmd = 'channel_block',\n\t\t\t\t\tsender = msg.from.id\n\t\t\t\t}\n\t\t\t    local username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..username)\n\t\t\t\tresolve_username(username, callbackres, cbres_extra)]]\n\t\t\tlocal get_cmd = 'channel_block'\n\t\t\tlocal msg = msg\n\t\t\tlocal username = matches[2]\n\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'id' then\n\t\t\tif type(msg.reply_id) ~= \"nil\" and is_momod(msg) and not matches[2] then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'id',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif type(msg.reply_id) ~= \"nil\" and matches[2] == \"from\" and is_momod(msg) then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'idfrom',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif msg.text:match(\"@[%a%d]\") then\n\t\t\t\tlocal cbres_extra = {\n\t\t\t\t\tchannelid = msg.to.id,\n\t\t\t\t\tget_cmd = 'id'\n\t\t\t\t}\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = username:gsub(\"@\",\"\")\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested ID for: @\"..username)\n\t\t\t\tresolve_username(username,  callbackres, cbres_extra)\n\t\t\telse\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup ID\")\n\t\t\t\treturn \"SuperGroup ID for \" ..string.gsub(msg.to.print_name, \"_\", \" \").. \":\\n\\n\"..msg.to.id\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'kickme' then\n\t\t\tif msg.to.type == 'channel' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] left via kickme\")\n\t\t\t\tchannel_kick(\"channel#id\"..msg.to.id, \"user#id\"..msg.from.id, ok_cb, false)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'newlink' and is_momod(msg)then\n\t\t\tlocal function callback_link (extra , success, result)\n\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tif success == 0 then\n\t\t\t\t\tsend_large_msg(receiver, '*Error: Failed to retrieve link* \\nReason: Not creator.\\n\\nIf you have the link, please use /setlink to set it')\n\t\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = nil\n\t\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\telse\n\t\t\t\t\tsend_large_msg(receiver, \"Created a new link\")\n\t\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = result\n\t\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\tend\n\t\t\tend\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] attempted to create a new SuperGroup link\")\n\t\t\texport_channel_link(receiver, callback_link, false)\n\t\tend\n\n\t\tif matches[1] == 'setlink' and is_owner(msg) then\n\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = 'waiting'\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\treturn 'Please send the new group link now'\n\t\tend\n\n\t\tif msg.text then\n\t\t\tif msg.text:match(\"^(https://telegram.me/joinchat/%S+)$\") and data[tostring(msg.to.id)]['settings']['set_link'] == 'waiting' and is_owner(msg) then\n\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = msg.text\n\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\treturn \"New link set\"\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'link' then\n\t\t\tif not is_momod(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tlocal group_link = data[tostring(msg.to.id)]['settings']['set_link']\n\t\t\tif not group_link then\n\t\t\t\treturn \"Create a link using /newlink first!\\n\\nOr if I am not creator use /setlink to set your link\"\n\t\t\tend\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group link [\"..group_link..\"]\")\n\t\t\treturn \"Group link:\\n\"..group_link\n\t\tend\n\n\t\tif matches[1] == \"invite\" and is_sudo(msg) then\n\t\t\tlocal cbres_extra = {\n\t\t\t\tchannel = get_receiver(msg),\n\t\t\t\tget_cmd = \"invite\"\n\t\t\t}\n\t\t\tlocal username = matches[2]\n\t\t\tlocal username = username:gsub(\"@\",\"\")\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] invited @\"..username)\n\t\t\tresolve_username(username,  callbackres, cbres_extra)\n\t\tend\n\n\t\tif matches[1] == 'res' and is_owner(msg) then\n\t\t\tlocal cbres_extra = {\n\t\t\t\tchannelid = msg.to.id,\n\t\t\t\tget_cmd = 'res'\n\t\t\t}\n\t\t\tlocal username = matches[2]\n\t\t\tlocal username = username:gsub(\"@\",\"\")\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] resolved username: @\"..username)\n\t\t\tresolve_username(username,  callbackres, cbres_extra)\n\t\tend\n\n\t\t--[[if matches[1] == 'kick' and is_momod(msg) then\n\t\t\tlocal receiver = channel..matches[3]\n\t\t\tlocal user = \"user#id\"..matches[2]\n\t\t\tchaannel_kick(receiver, user, ok_cb, false)\n\t\tend]]\n\n\t\t\tif matches[1] == 'setadmin' then\n\t\t\t\tif not is_support(msg.from.id) and not is_owner(msg) then\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'setadmin',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tsetadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'setadmin' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t--[[]\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal user_id = \"user#id\"..matches[2]\n\t\t\t\tlocal get_cmd = 'setadmin'\n\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})]]\n\t\t\t\tlocal get_cmd = 'setadmin'\n\t\t\t\tlocal msg = msg\n\t\t\t\tlocal user_id = matches[2]\n\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})\n\t\t\telseif matches[1] == 'setadmin' and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\t--[[local cbres_extra = {\n\t\t\t\t\tchannel = get_receiver(msg),\n\t\t\t\t\tget_cmd = 'setadmin'\n\t\t\t\t}\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..username)\n\t\t\t\tresolve_username(username, callbackres, cbres_extra)]]\n\t\t\t\tlocal get_cmd = 'setadmin'\n\t\t\t\tlocal msg = msg\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'demoteadmin' then\n\t\t\tif not is_support(msg.from.id) and not is_owner(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'demoteadmin',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tdemoteadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'demoteadmin' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal user_id = \"user#id\"..matches[2]\n\t\t\t\tlocal get_cmd = 'demoteadmin'\n\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})\n\t\t\telseif matches[1] == 'demoteadmin' and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal cbres_extra = {\n\t\t\t\t\tchannel = get_receiver(msg),\n\t\t\t\t\tget_cmd = 'demoteadmin'\n\t\t\t\t}\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted admin @\"..username)\n\t\t\t\tresolve_username(username, callbackres, cbres_extra)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'setowner' and is_owner(msg) then\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'setowner',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tsetowner = get_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'setowner' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t--[[\tlocal group_owner = data[tostring(msg.to.id)]['set_owner']\n\t\t\t\tif group_owner then\n\t\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\t\tlocal user_id = \"user#id\"..group_owner\n\t\t\t\t\tif not is_admin2(group_owner) and not is_support(group_owner) then\n\t\t\t\t\t\tchannel_demote(receiver, user_id, ok_cb, false)\n\t\t\t\t\tend\n\t\t\t\t\tlocal user = \"user#id\"..matches[2]\n\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)\n\t\t\t\t\tdata[tostring(msg.to.id)]['set_owner'] = tostring(matches[2])\n\t\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set [\"..matches[2]..\"] as owner\")\n\t\t\t\t\tlocal text = \"[ \"..matches[2]..\" ] added as owner\"\n\t\t\t\t\treturn text\n\t\t\t\tend]]\n\t\t\t\tlocal\tget_cmd = 'setowner'\n\t\t\t\tlocal\tmsg = msg\n\t\t\t\tlocal user_id = matches[2]\n\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})\n\t\t\telseif matches[1] == 'setowner' and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal\tget_cmd = 'setowner'\n\t\t\t\tlocal\tmsg = msg\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'promote' then\n\t\t  if not is_momod(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif not is_owner(msg) then\n\t\t\t\treturn \"Only owner/admin can promote\"\n\t\t\tend\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'promote',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tpromote = get_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'promote' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal user_id = \"user#id\"..matches[2]\n\t\t\t\tlocal get_cmd = 'promote'\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted user#id\"..matches[2])\n\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})\n\t\t\telseif matches[1] == 'promote' and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal cbres_extra = {\n\t\t\t\t\tchannel = get_receiver(msg),\n\t\t\t\t\tget_cmd = 'promote',\n\t\t\t\t}\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted @\"..username)\n\t\t\t\treturn resolve_username(username, callbackres, cbres_extra)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'mp' and is_sudo(msg) then\n\t\t\tchannel = get_receiver(msg)\n\t\t\tuser_id = 'user#id'..matches[2]\n\t\t\tchannel_set_mod(channel, user_id, ok_cb, false)\n\t\t\treturn \"ok\"\n\t\tend\n\t\tif matches[1] == 'md' and is_sudo(msg) then\n\t\t\tchannel = get_receiver(msg)\n\t\t\tuser_id = 'user#id'..matches[2]\n\t\t\tchannel_demote(channel, user_id, ok_cb, false)\n\t\t\treturn \"ok\"\n\t\tend\n\n\t\tif matches[1] == 'demote' then\n\t\t\tif not is_momod(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif not is_owner(msg) then\n\t\t\t\treturn \"Only owner/support/admin can promote\"\n\t\t\tend\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal cbreply_extra = {\n\t\t\t\t\tget_cmd = 'demote',\n\t\t\t\t\tmsg = msg\n\t\t\t\t}\n\t\t\t\tdemote = get_message(msg.reply_id, get_message_callback, cbreply_extra)\n\t\t\telseif matches[1] == 'demote' and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal user_id = \"user#id\"..matches[2]\n\t\t\t\tlocal get_cmd = 'demote'\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted user#id\"..matches[2])\n\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})\n\t\t\telseif matches[1] == 'demote' and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal cbres_extra = {\n\t\t\t\t\tchannel = get_receiver(msg),\n\t\t\t\t\tget_cmd = 'demote'\n\t\t\t\t}\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted @\"..username)\n\t\t\t\treturn resolve_username(username, callbackres, cbres_extra)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == \"setname\" and is_momod(msg) then\n\t\t\tlocal receiver = get_receiver(msg)\n\t\t\tlocal set_name = string.gsub(matches[2], '_', '')\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..matches[2])\n\t\t\trename_channel(receiver, set_name, ok_cb, false)\n\t\tend\n\n\t\tif msg.service and msg.action.type == 'chat_rename' then\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..msg.to.title)\n\t\t\tdata[tostring(msg.to.id)]['settings']['set_name'] = msg.to.title\n\t\t\tsave_data(_config.moderation.data, data)\n\t\tend\n\n\t\tif matches[1] == \"setabout\" and is_momod(msg) then\n\t\t\tlocal receiver = get_receiver(msg)\n\t\t\tlocal about_text = matches[2]\n\t\t\tlocal data_cat = 'description'\n\t\t\tlocal target = msg.to.id\n\t\t\tdata[tostring(target)][data_cat] = about_text\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup description to: \"..about_text)\n\t\t\tchannel_set_about(receiver, about_text, ok_cb, false)\n\t\t\treturn \"Description has been set.\\n\\nSelect the chat again to see the changes.\"\n\t\tend\n\n\t\tif matches[1] == \"setusername\" and is_admin1(msg) then\n\t\t\tlocal function ok_username_cb (extra, success, result)\n\t\t\t\tlocal receiver = extra.receiver\n\t\t\t\tif success == 1 then\n\t\t\t\t\tsend_large_msg(receiver, \"SuperGroup username Set.\\n\\nSelect the chat again to see the changes.\")\n\t\t\t\telseif success == 0 then\n\t\t\t\t\tsend_large_msg(receiver, \"Failed to set SuperGroup username.\\nUsername may already be taken.\\n\\nNote: Username can use a-z, 0-9 and underscores.\\nMinimum length is 5 characters.\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\tchannel_set_username(receiver, username, ok_username_cb, {receiver=receiver})\n\t\tend\n\n\t\tif matches[1] == 'setrules' and is_momod(msg) then\n\t\t\trules = matches[2]\n\t\t\tlocal target = msg.to.id\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] has changed group rules to [\"..matches[2]..\"]\")\n\t\t\treturn set_rulesmod(msg, data, target)\n\t\tend\n\n\t\tif msg.media then\n\t\t\tif msg.media.type == 'photo' and data[tostring(msg.to.id)]['settings']['set_photo'] == 'waiting' and is_momod(msg) then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set new SuperGroup photo\")\n\t\t\t\tload_photo(msg.id, set_supergroup_photo, msg)\n\t\t\t\treturn\n\t\t\tend\n\t\tend\n\t\tif matches[1] == 'setphoto' and is_momod(msg) then\n\t\t\tdata[tostring(msg.to.id)]['settings']['set_photo'] = 'waiting'\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] started setting new SuperGroup photo\")\n\t\t\treturn 'Please send the new group photo now'\n\t\tend\n\n\t\tif matches[1] == 'clean' then\n\t\t\tif not is_momod(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif not is_momod(msg) then\n\t\t\t\treturn \"Only owner can clean\"\n\t\t\tend\n\t\t\tif matches[2] == 'modlist' then\n\t\t\t\tif next(data[tostring(msg.to.id)]['moderators']) == nil then\n\t\t\t\t\treturn 'No moderator(s) in this SuperGroup.'\n\t\t\t\tend\n\t\t\t\tfor k,v in pairs(data[tostring(msg.to.id)]['moderators']) do\n\t\t\t\t\tdata[tostring(msg.to.id)]['moderators'][tostring(k)] = nil\n\t\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\tend\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned modlist\")\n\t\t\t\treturn 'Modlist has been cleaned'\n\t\t\tend\n\t\t\tif matches[2] == 'rules' then\n\t\t\t\tlocal data_cat = 'rules'\n\t\t\t\tif data[tostring(msg.to.id)][data_cat] == nil then\n\t\t\t\t\treturn \"Rules have not been set\"\n\t\t\t\tend\n\t\t\t\tdata[tostring(msg.to.id)][data_cat] = nil\n\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned rules\")\n\t\t\t\treturn 'Rules have been cleaned'\n\t\t\tend\n\t\t\tif matches[2] == 'about' then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal about_text = ' '\n\t\t\t\tlocal data_cat = 'description'\n\t\t\t\tif data[tostring(msg.to.id)][data_cat] == nil then\n\t\t\t\t\treturn 'About is not set'\n\t\t\t\tend\n\t\t\t\tdata[tostring(msg.to.id)][data_cat] = nil\n\t\t\t\tsave_data(_config.moderation.data, data)\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned about\")\n\t\t\t\tchannel_set_about(receiver, about_text, ok_cb, false)\n\t\t\t\treturn \"About has been cleaned\"\n\t\t\tend\n\t\t\tif matches[2] == 'mutelist' then\n\t\t\t\tchat_id = msg.to.id\n\t\t\t\tlocal hash =  'mute_user:'..chat_id\n\t\t\t\t\tredis:del(hash)\n\t\t\t\treturn \"Mutelist Cleaned\"\n\t\t\tend\n\t\t\tif matches[2] == 'username' and is_admin1(msg) then\n\t\t\t\tlocal function ok_username_cb (extra, success, result)\n\t\t\t\t\tlocal receiver = extra.receiver\n\t\t\t\t\tif success == 1 then\n\t\t\t\t\t\tsend_large_msg(receiver, \"SuperGroup username cleaned.\")\n\t\t\t\t\telseif success == 0 then\n\t\t\t\t\t\tsend_large_msg(receiver, \"Failed to clean SuperGroup username.\")\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tlocal username = \"\"\n\t\t\t\tchannel_set_username(receiver, username, ok_username_cb, {receiver=receiver})\n\t\t\tend\n\t\t\tif matches[2] == \"bots\" and is_momod(msg) then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked all SuperGroup bots\")\n\t\t\t\tchannel_get_bots(receiver, callback_clean_bots, {msg = msg})\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'lock' and is_momod(msg) then\n\t\t\tlocal target = msg.to.id\n\t\t\tif matches[2] == 'links' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked link posting \")\n\t\t\t\treturn lock_group_links(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'spam' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked spam \")\n\t\t\t\treturn lock_group_spam(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'flood' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked flood \")\n\t\t\t\treturn lock_group_flood(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'arabic' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked arabic \")\n\t\t\t\treturn lock_group_arabic(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'member' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked member \")\n\t\t\t\treturn lock_group_membermod(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2]:lower() == 'rtl' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked rtl chars. in names\")\n\t\t\t\treturn lock_group_rtl(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'tgservice' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked Tgservice Actions\")\n\t\t\t\treturn lock_group_tgservice(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'sticker' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked sticker posting\")\n\t\t\t\treturn lock_group_sticker(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'contacts' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked contact posting\")\n\t\t\t\treturn lock_group_contacts(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'strict' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked enabled strict settings\")\n\t\t\t\treturn enable_strict_rules(msg, data, target)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'unlock' and is_momod(msg) then\n\t\t\tlocal target = msg.to.id\n\t\t\tif matches[2] == 'links' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked link posting\")\n\t\t\t\treturn unlock_group_links(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'spam' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked spam\")\n\t\t\t\treturn unlock_group_spam(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'flood' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked flood\")\n\t\t\t\treturn unlock_group_flood(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'arabic' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked Arabic\")\n\t\t\t\treturn unlock_group_arabic(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'member' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked member \")\n\t\t\t\treturn unlock_group_membermod(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2]:lower() == 'rtl' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked RTL chars. in names\")\n\t\t\t\treturn unlock_group_rtl(msg, data, target)\n\t\t\tend\n\t\t\t\tif matches[2] == 'tgservice' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked tgservice actions\")\n\t\t\t\treturn unlock_group_tgservice(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'sticker' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked sticker posting\")\n\t\t\t\treturn unlock_group_sticker(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'contacts' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked contact posting\")\n\t\t\t\treturn unlock_group_contacts(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'strict' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked disabled strict settings\")\n\t\t\t\treturn disable_strict_rules(msg, data, target)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'setflood' then\n\t\t\tif not is_momod(msg) then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif tonumber(matches[2]) < 5 or tonumber(matches[2]) > 20 then\n\t\t\t\treturn \"Wrong number,range is [5-20]\"\n\t\t\tend\n\t\t\tlocal flood_max = matches[2]\n\t\t\tdata[tostring(msg.to.id)]['settings']['flood_msg_max'] = flood_max\n\t\t\tsave_data(_config.moderation.data, data)\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set flood to [\"..matches[2]..\"]\")\n\t\t\treturn 'Flood has been set to: '..matches[2]\n\t\tend\n\t\tif matches[1] == 'public' and is_momod(msg) then\n\t\t\tlocal target = msg.to.id\n\t\t\tif matches[2] == 'yes' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set group to: public\")\n\t\t\t\treturn set_public_membermod(msg, data, target)\n\t\t\tend\n\t\t\tif matches[2] == 'no' then\n\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: not public\")\n\t\t\t\treturn unset_public_membermod(msg, data, target)\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == 'mute' and is_owner(msg) then\n\t\t\tlocal chat_id = msg.to.id\n\t\t\tif matches[2] == 'audio' then\n\t\t\tlocal msg_type = 'Audio'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'photo' then\n\t\t\tlocal msg_type = 'Photo'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'video' then\n\t\t\tlocal msg_type = 'Video'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'gifs' then\n\t\t\tlocal msg_type = 'Gifs'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" have been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'documents' then\n\t\t\tlocal msg_type = 'Documents'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" have been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'text' then\n\t\t\tlocal msg_type = 'Text'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been muted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'all' then\n\t\t\tlocal msg_type = 'All'\n\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)\n\t\t\t\t\tmute(chat_id, msg_type)\n\t\t\t\t\treturn \"Mute \"..msg_type..\"  has been enabled\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already on\"\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif matches[1] == 'unmute' and is_momod(msg) then\n\t\t\tlocal chat_id = msg.to.id\n\t\t\tif matches[2] == 'audio' then\n\t\t\tlocal msg_type = 'Audio'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'photo' then\n\t\t\tlocal msg_type = 'Photo'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'video' then\n\t\t\tlocal msg_type = 'Video'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'gifs' then\n\t\t\tlocal msg_type = 'Gifs'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" have been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'documents' then\n\t\t\tlocal msg_type = 'Documents'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" have been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'text' then\n\t\t\tlocal msg_type = 'Text'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute message\")\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn msg_type..\" has been unmuted\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute text is already off\"\n\t\t\t\tend\n\t\t\tend\n\t\t\tif matches[2] == 'all' then\n\t\t\tlocal msg_type = 'All'\n\t\t\t\tif is_muted(chat_id, msg_type..': yes') then\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)\n\t\t\t\t\tunmute(chat_id, msg_type)\n\t\t\t\t\treturn \"Mute \"..msg_type..\" has been disabled\"\n\t\t\t\telse\n\t\t\t\t\treturn \"Mute \"..msg_type..\" is already disabled\"\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\n\t\tif matches[1] == \"muteuser\" and is_momod(msg) then\n\t\t\tlocal chat_id = msg.to.id\n\t\t\tlocal hash = \"mute_user\"..chat_id\n\t\t\tlocal user_id = \"\"\n\t\t\tif type(msg.reply_id) ~= \"nil\" then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal get_cmd = \"mute_user\"\n\t\t\t\tmuteuser = get_message(msg.reply_id, get_message_callback, {receiver = receiver, get_cmd = get_cmd, msg = msg})\n\t\t\telseif matches[1] == \"muteuser\" and matches[2] and string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal user_id = matches[2]\n\t\t\t\tif is_muted_user(chat_id, user_id) then\n\t\t\t\t\tunmute_user(chat_id, user_id)\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] removed [\"..user_id..\"] from the muted users list\")\n\t\t\t\t\treturn \"[\"..user_id..\"] removed from the muted users list\"\n\t\t\t\telseif is_owner(msg) then\n\t\t\t\t\tmute_user(chat_id, user_id)\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added [\"..user_id..\"] to the muted users list\")\n\t\t\t\t\treturn \"[\"..user_id..\"] added to the muted user list\"\n\t\t\t\tend\n\t\t\telseif matches[1] == \"muteuser\" and matches[2] and not string.match(matches[2], '^%d+$') then\n\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\tlocal get_cmd = \"mute_user\"\n\t\t\t\tlocal username = matches[2]\n\t\t\t\tlocal username = string.gsub(matches[2], '@', '')\n\t\t\t\tresolve_username(username, callbackres, {receiver = receiver, get_cmd = get_cmd, msg=msg})\n\t\t\tend\n\t\tend\n\n\t\tif matches[1] == \"muteslist\" and is_momod(msg) then\n\t\t\tlocal chat_id = msg.to.id\n\t\t\tif not has_mutes(chat_id) then\n\t\t\t\tset_mutes(chat_id)\n\t\t\t\treturn mutes_list(chat_id)\n\t\t\tend\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup muteslist\")\n\t\t\treturn mutes_list(chat_id)\n\t\tend\n\t\tif matches[1] == \"mutelist\" and is_momod(msg) then\n\t\t\tlocal chat_id = msg.to.id\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup mutelist\")\n\t\t\treturn muted_user_list(chat_id)\n\t\tend\n\n\t\tif matches[1] == 'settings' and is_momod(msg) then\n\t\t\tlocal target = msg.to.id\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup settings \")\n\t\t\treturn show_supergroup_settingsmod(msg, target)\n\t\tend\n\n\t\tif matches[1] == 'rules' then\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group rules\")\n\t\t\treturn get_rules(msg, data)\n\t\tend\n\n\t\tif matches[1] == 'help' and not is_owner(msg) then\n\t\t\ttext = \"Message /superhelp to @Teleseed in private for SuperGroup help\"\n\t\t\treply_msg(msg.id, text, ok_cb, false)\n\t\telseif matches[1] == 'help' and is_owner(msg) then\n\t\t\tlocal name_log = user_print_name(msg.from)\n\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] Used /superhelp\")\n\t\t\treturn super_help()\n\t\tend\n\n\t\tif matches[1] == 'peer_id' and is_admin1(msg)then\n\t\t\ttext = msg.to.peer_id\n\t\t\treply_msg(msg.id, text, ok_cb, false)\n\t\t\tpost_large_msg(receiver, text)\n\t\tend\n\n\t\tif matches[1] == 'msg.to.id' and is_admin1(msg) then\n\t\t\ttext = msg.to.id\n\t\t\treply_msg(msg.id, text, ok_cb, false)\n\t\t\tpost_large_msg(receiver, text)\n\t\tend\n\n\t\t--Admin Join Service Message\n\t\tif msg.service then\n\t\tlocal action = msg.action.type\n\t\t\tif action == 'chat_add_user_link' then\n\t\t\t\tif is_owner2(msg.from.id) then\n\t\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\t\tlocal user = \"user#id\"..msg.from.id\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" Admin [\"..msg.from.id..\"] joined the SuperGroup via link\")\n\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\t\tif is_support(msg.from.id) and not is_owner2(msg.from.id) then\n\t\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\t\tlocal user = \"user#id\"..msg.from.id\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" Support member [\"..msg.from.id..\"] joined the SuperGroup\")\n\t\t\t\t\tchannel_set_mod(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif action == 'chat_add_user' then\n\t\t\t\tif is_owner2(msg.action.user.id) then\n\t\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\t\tlocal user = \"user#id\"..msg.action.user.id\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" Admin [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\")\n\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\t\tif is_support(msg.action.user.id) and not is_owner2(msg.action.user.id) then\n\t\t\t\t\tlocal receiver = get_receiver(msg)\n\t\t\t\t\tlocal user = \"user#id\"..msg.action.user.id\n\t\t\t\t\tsavelog(msg.to.id, name_log..\" Support member [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\")\n\t\t\t\t\tchannel_set_mod(receiver, user, ok_cb, false)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif matches[1] == 'msg.to.peer_id' then\n\t\t\tpost_large_msg(receiver, msg.to.peer_id)\n\t\tend\n\tend\nend\n\nlocal function pre_process(msg)\n  if not msg.text and msg.media then\n    msg.text = '['..msg.media.type..']'\n  end\n  return msg\nend\n\nreturn {\n  patterns = {\n\t\"^[#!/]([Aa]dd)$\",\n\t\"^[#!/]([Rr]em)$\",\n\t\"^[#!/]([Mm]ove) (.*)$\",\n\t\"^[#!/]([Ii]nfo)$\",\n\t\"^[#!/]([Aa]dmins)$\",\n\t\"^[#!/]([Oo]wner)$\",\n\t\"^[#!/]([Mm]odlist)$\",\n\t\"^[#!/]([Bb]ots)$\",\n\t\"^[#!/]([Ww]ho)$\",\n\t\"^[#!/]([Kk]icked)$\",\n    \"^[#!/]([Bb]lock) (.*)\",\n\t\"^[#!/]([Bb]lock)\",\n\t\"^[#!/]([Tt]osuper)$\",\n\t\"^[#!/]([Ii][Dd])$\",\n\t\"^[#!/]([Ii][Dd]) (.*)$\",\n\t\"^[#!/]([Kk]ickme)$\",\n\t\"^[#!/]([Kk]ick) (.*)$\",\n\t\"^[#!/]([Nn]ewlink)$\",\n\t\"^[#!/]([Ss]etlink)$\",\n\t\"^[#!/]([Ll]ink)$\",\n\t\"^[#!/]([Rr]es) (.*)$\",\n\t\"^[#!/]([Ss]etadmin) (.*)$\",\n\t\"^[#!/]([Ss]etadmin)\",\n\t\"^[#!/]([Dd]emoteadmin) (.*)$\",\n\t\"^[#!/]([Dd]emoteadmin)\",\n\t\"^[#!/]([Ss]etowner) (.*)$\",\n\t\"^[#!/]([Ss]etowner)$\",\n\t\"^[#!/]([Pp]romote) (.*)$\",\n\t\"^[#!/]([Pp]romote)\",\n\t\"^[#!/]([Dd]emote) (.*)$\",\n\t\"^[#!/]([Dd]emote)\",\n\t\"^[#!/]([Ss]etname) (.*)$\",\n\t\"^[#!/]([Ss]etabout) (.*)$\",\n\t\"^[#!/]([Ss]etrules) (.*)$\",\n\t\"^[#!/]([Ss]etphoto)$\",\n\t\"^[#!/]([Ss]etusername) (.*)$\",\n\t\"^[#!/]([Dd]el)$\",\n\t\"^[#!/]([Ll]ock) (.*)$\",\n\t\"^[#!/]([Uu]nlock) (.*)$\",\n\t\"^[#!/]([Mm]ute) ([^%s]+)$\",\n\t\"^[#!/]([Uu]nmute) ([^%s]+)$\",\n\t\"^[#!/]([Mm]uteuser)$\",\n\t\"^[#!/]([Mm]uteuser) (.*)$\",\n\t\"^[#!/]([Pp]ublic) (.*)$\",\n\t\"^[#!/]([Ss]ettings)$\",\n\t\"^[#!/]([Rr]ules)$\",\n\t\"^[#!/]([Ss]etflood) (%d+)$\",\n\t\"^[#!/]([Cc]lean) (.*)$\",\n\t\"^[#!/]([Hh]elp)$\",\n\t\"^[#!/]([Mm]uteslist)$\",\n\t\"^[#!/]([Mm]utelist)$\",\n    \"[#!/](mp) (.*)\",\n\t\"[#!/](md) (.*)\",\n    \"^(https://telegram.me/joinchat/%S+)$\",\n\t\"msg.to.peer_id\",\n\t\"%[(document)%]\",\n\t\"%[(photo)%]\",\n\t\"%[(video)%]\",\n\t\"%[(audio)%]\",\n\t\"%[(contact)%]\",\n\t\"^!!tgservice (.+)$\",\n  },\n  run = run,\n  pre_process = pre_process\n}\n--End supergrpup.lua\n--By @Rondoozle\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2033,"column":0},"action":"remove","lines":["--Begin supergrpup.lua ","--Check members #Add supergroup ","local function check_member_super(cb_extra, success, result) ","  local receiver = cb_extra.receiver ","  local data = cb_extra.data ","  local msg = cb_extra.msg ","  if success == 0 then ","   send_large_msg(receiver, \"Promote me to admin first!\") ","  end ","  for k,v in pairs(result) do ","    local member_id = v.peer_id ","    if member_id ~= our_id then ","      -- SuperGroup configuration ","      data[tostring(msg.to.id)] = { ","        group_type = 'SuperGroup', ","      long_id = msg.to.peer_id, ","      moderators = {}, ","        set_owner = member_id , ","        settings = { ","          set_name = string.gsub(msg.to.title, '_', ' '), ","        lock_arabic = 'no', ","        lock_link = \"no\", ","          flood = 'yes', ","        lock_spam = 'yes', ","        lock_sticker = 'no', ","        member = 'no', ","        public = 'no', ","        lock_rtl = 'no', ","        lock_contacts = 'no', ","        strict = 'no' ","        } ","      } ","      save_data(_config.moderation.data, data) ","      local groups = 'groups' ","      if not data[tostring(groups)] then ","        data[tostring(groups)] = {} ","        save_data(_config.moderation.data, data) ","      end ","      data[tostring(groups)][tostring(msg.to.id)] = msg.to.id ","      save_data(_config.moderation.data, data) ","     local text = 'تـم تفعيـل البـوت في المجموعـة الخارقـة (✔) ��!' ","      return reply_msg(msg.id, text, ok_cb, false) ","    end ","  end ","end ","","--Check Members #rem supergroup ","local function check_member_superrem(cb_extra, success, result) ","  local receiver = cb_extra.receiver ","  local data = cb_extra.data ","  local msg = cb_extra.msg ","  for k,v in pairs(result) do ","    local member_id = v.id ","    if member_id ~= our_id then ","     -- Group configuration removal ","      data[tostring(msg.to.id)] = nil ","      save_data(_config.moderation.data, data) ","      local groups = 'groups' ","      if not data[tostring(groups)] then ","        data[tostring(groups)] = nil ","        save_data(_config.moderation.data, data) ","      end ","      data[tostring(groups)][tostring(msg.to.id)] = nil ","      save_data(_config.moderation.data, data) ","     local text = 'تـم الغـاء تفعيـل البـوت في المجموعـة الخارقـه (✔) ��' ","      return reply_msg(msg.id, text, ok_cb, false) ","    end ","  end ","end ","","--Function to Add supergroup ","local function superadd(msg) ","   local data = load_data(_config.moderation.data) ","   local receiver = get_receiver(msg) ","    channel_get_users(receiver, check_member_super,{receiver = receiver, data = data, msg = msg}) ","end ","","--Function to remove supergroup ","local function superrem(msg) ","   local data = load_data(_config.moderation.data) ","    local receiver = get_receiver(msg) ","    channel_get_users(receiver, check_member_superrem,{receiver = receiver, data = data, msg = msg}) ","end ","","--Get and output admins and bots in supergroup ","local function callback(cb_extra, success, result) ","local i = 1 ","local chat_name = string.gsub(cb_extra.msg.to.print_name, \"_\", \" \") ","local member_type = cb_extra.member_type ","local text = member_type..\" for \"..chat_name..\":\\n\" ","for k,v in pairsByKeys(result) do ","if not v.first_name then ","   name = \" \" ","else ","   vname = v.first_name:gsub(\"‮\", \"\") ","   name = vname:gsub(\"_\", \" \") ","   end ","      text = text..\"\\n\"..i..\" - \"..name..\"[\"..v.peer_id..\"]\" ","      i = i + 1 ","   end ","    send_large_msg(cb_extra.receiver, text) ","end ","","--Get and output info about supergroup ","local function callback_info(cb_extra, success, result) ","local title =\"معلومات السوبر كروب: [\"..result.title..\"]\\n\\n\" ","local admin_num = \"عدد الادمنيه: \"..result.admins_count..\"\\n\" ","local user_num = \"عدد لاعضاء :\"..result.participants_count..\"\\n\" ","local kicked_num = \"عدد المطرودين: \"..result.kicked_count..\"\\n\" ","local channel_id = \"ايدي السوبر كروب: \"..result.peer_id..\"\\n\" ","if result.username then ","   channel_username = \"المعرف: @\"..result.username ","else ","   channel_username = \"\" ","end ","local text = title..admin_num..user_num..kicked_num..channel_id..channel_username ","    send_large_msg(cb_extra.receiver, text) ","end ","","--Get and output members of supergroup ","local function callback_who(cb_extra, success, result) ","local text = \"Members for \"..cb_extra.receiver ","local i = 1 ","for k,v in pairsByKeys(result) do ","if not v.print_name then ","   name = \" \" ","else ","   vname = v.print_name:gsub(\"‮\", \"\") ","   name = vname:gsub(\"_\", \" \") ","end ","   if v.username then ","      username = \" @\"..v.username ","   else ","      username = \"\" ","   end ","   text = text..\"\\n\"..i..\" - \"..name..\" \"..username..\" [ \"..v.peer_id..\" ]\\n\" ","   --text = text..\"\\n\"..username ","   i = i + 1 ","end ","    local file = io.open(\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", \"w\") ","    file:write(text) ","    file:flush() ","    file:close() ","    send_document(cb_extra.receiver,\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", ok_cb, false) ","   post_msg(cb_extra.receiver, text, ok_cb, false) ","end ","","--Get and output list of kicked users for supergroup ","local function callback_kicked(cb_extra, success, result) ","--vardump(result) ","local text = \"Kicked Members for SuperGroup \"..cb_extra.receiver..\"\\n\\n\" ","local i = 1 ","for k,v in pairsByKeys(result) do ","if not v.print_name then ","   name = \" \" ","else ","   vname = v.print_name:gsub(\"‮\", \"\") ","   name = vname:gsub(\"_\", \" \") ","end ","   if v.username then ","      name = name..\" @\"..v.username ","   end ","   text = text..\"\\n\"..i..\" - \"..name..\" [ \"..v.peer_id..\" ]\\n\" ","   i = i + 1 ","end ","    local file = io.open(\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", \"w\") ","    file:write(text) ","    file:flush() ","    file:close() ","    send_document(cb_extra.receiver,\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", ok_cb, false) ","   --send_large_msg(cb_extra.receiver, text) ","end ","","--Begin supergroup locks ","local function lock_group_links(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_link_lock = data[tostring(target)]['settings']['lock_link'] ","  if group_link_lock == 'yes' then ","    return '☑️ قفل ارسال الروابط مقفل بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_link'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الـروابط غير ممكنه,لا يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function unlock_group_links(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_link_lock = data[tostring(target)]['settings']['lock_link'] ","  if group_link_lock == 'no' then ","    return '☑️ فتح ارسال الروابط مفعله بالفعـل ������️' ","  else ","    data[tostring(target)]['settings']['lock_link'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الروابط ممكنه,يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function lock_group_spam(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  if not is_owner(msg) then ","    return \"للمدراء فقط!\" ","  end ","  local group_spam_lock = data[tostring(target)]['settings']['lock_spam'] ","  if group_spam_lock == 'yes' then ","    return '☑️ قفل ارسال الرسائل الطويله مقفوله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_spam'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الرسائل الطويله غير ممكنه,لا يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function unlock_group_spam(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_spam_lock = data[tostring(target)]['settings']['lock_spam'] ","  if group_spam_lock == 'no' then ","    return '☑️ فتح ارسال الرسائل الطويله مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_spam'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الرسائل الطويله ممكنه,يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function lock_group_flood(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_flood_lock = data[tostring(target)]['settings']['flood'] ","  if group_flood_lock == 'yes' then ","    return '☑️ قفل التكرار بالرسائل مقفوله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['flood'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبح التكرار بالرسائل غير ممكنه,لا يمكن للاعضاء التكرار في الدردشه ������' ","  end ","end ","","local function unlock_group_flood(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_flood_lock = data[tostring(target)]['settings']['flood'] ","  if group_flood_lock == 'no' then ","    return '☑️ فتح التكرار بالرسائل مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['flood'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبح التكرار بالرسائل  ممكنه,يمكن للاعضاء التكرار في الدردشه ������' ","  end ","end ","","local function lock_group_arabic(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic'] ","  if group_arabic_lock == 'yes' then ","    return '☑️ قفل التكلم باللغة العربية مقفوله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_arabic'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبح التكلم بالعربية غير ممكن,لا يمكن للاعضاء التكلم باللغه العربية في الدردشه ������' ","  end ","end ","","local function unlock_group_arabic(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic'] ","  if group_arabic_lock == 'no' then ","    return '☑️ فتح التكلم باللغة العربية مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_arabic'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبح التكلم بالعربية  ممكن,يمكن للاعضاء التكلم باللغه العربية في الدردشه ������' ","  end ","end ","","local function lock_group_membermod(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_member_lock = data[tostring(target)]['settings']['lock_member'] ","  if group_member_lock == 'yes' then ","    return '☑️ قفل اضافه الاعضاء مقفوله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_member'] = 'yes' ","    save_data(_config.moderation.data, data) ","  end ","  return '‌‌‌‌‌☑️ اصبحت  الاضافه غير ممكنه,لا يمكن للاعضاء الاضافه ������' ","end ","","local function unlock_group_membermod(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_member_lock = data[tostring(target)]['settings']['lock_member'] ","  if group_member_lock == 'no' then ","    return '☑️ فتح اضافه الاعضاء مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_member'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت  الاضافه ممكنه,يمكن للاعضاء الاضافه ������' ","  end ","end ","","local function lock_group_rtl(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl'] ","  if group_rtl_lock == 'yes' then ","    return '☑️ قفل ارسال RTL مقفله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_rtl'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الـRTL غير ممكنه,لا يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function unlock_group_rtl(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl'] ","  if group_rtl_lock == 'no' then ","    return '☑️ فتح ارسال RTL مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_rtl'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الـRTL ممكنه,يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function lock_group_sticker(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker'] ","  if group_sticker_lock == 'yes' then ","    return '☑️ منـع ارسال الملصقـات مقفلـه بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_sticker'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الملصقات غير ممكنه,لا يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function unlock_group_sticker(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker'] ","  if group_sticker_lock == 'no' then ","    return '☑️ فتح ارسال الملصقـات مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_sticker'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل الملصقات ممكنه,يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function lock_group_contacts(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_rtl_lock = data[tostring(target)]['settings']['lock_contacts'] ","  if group_contacts_lock == 'yes' then ","    return '☑️ قفل ارسال جهات الاتصال مقفله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_contacts'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل جهات الاتصال غير ممكنه,لا يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function unlock_group_contacts(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_contacts_lock = data[tostring(target)]['settings']['lock_contacts'] ","  if group_contacts_lock == 'no' then ","    return '☑️ فتح ارسال جهات الاتصال مفعله بالفعـل ������' ","  else ","    data[tostring(target)]['settings']['lock_contacts'] = 'no' ","    save_data(_config.moderation.data, data) ","    return '‌‌‌‌‌☑️ اصبحت ارسال و تبادل جهات الاتصال ممكنه,يمكن للاعضاء استخدامها في الدردشه ������' ","  end ","end ","","local function enable_strict_rules(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_strict_lock = data[tostring(target)]['settings']['strict'] ","  if group_strict_lock == 'yes' then ","    return 'Settings are already strictly enforced' ","  else ","    data[tostring(target)]['settings']['strict'] = 'yes' ","    save_data(_config.moderation.data, data) ","    return 'Settings will be strictly enforced' ","  end ","end ","","local function disable_strict_rules(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_strict_lock = data[tostring(target)]['settings']['strict'] ","  if group_strict_lock == 'no' then ","    return 'Settings are not strictly enforced' ","  else ","    data[tostring(target)]['settings']['strict'] = 'no' ","    save_data(_config.moderation.data, data) ","    return 'Settings will not be strictly enforced' ","  end ","end ","--End supergroup locks ","","--'Set supergroup rules' function ","local function set_rulesmod(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local data_cat = 'rules' ","  data[tostring(target)][data_cat] = rules ","  save_data(_config.moderation.data, data) ","  return 'تــم اضافه القوانين ��' ","end ","","--'Get supergroup rules' function ","local function get_rules(msg, data) ","  local data_cat = 'rules' ","  if not data[tostring(msg.to.id)][data_cat] then ","    return 'لا يوجد قوانين في المجموعه ��' ","  end ","  local rules = data[tostring(msg.to.id)][data_cat] ","  local group_name = data[tostring(msg.to.id)]['settings']['set_name'] ","  local rules = group_name..' القوانين:\\n\\n'..rules:gsub(\"/n\", \" \") ","  return rules ","end ","","--Set supergroup to public or not public function ","local function set_public_membermod(msg, data, target) ","  if not is_momod(msg) then ","    return \"انـت مو ادمن لاتلعب ��\" ","  end ","  local group_public_lock = data[tostring(target)]['settings']['public'] ","  local long_id = data[tostring(target)]['long_id'] ","  if not long_id then ","   data[tostring(target)]['long_id'] = msg.to.peer_id ","   save_data(_config.moderation.data, data) ","  end ","  if group_public_lock == 'yes' then ","    return 'المجموعـة الخارقة بالفعل عامـة' ","  else ","    data[tostring(target)]['settings']['public'] = 'yes' ","    save_data(_config.moderation.data, data) ","  end ","  return 'المجموعـة الخارقة الان  اصبحت:عامـة (✔)' ","end ","","local function unset_public_membermod(msg, data, target) ","  if not is_momod(msg) then ","    return ","  end ","  local group_public_lock = data[tostring(target)]['settings']['public'] ","  local long_id = data[tostring(target)]['long_id'] ","  if not long_id then ","   data[tostring(target)]['long_id'] = msg.to.peer_id ","   save_data(_config.moderation.data, data) ","  end ","  if group_public_lock == 'no' then ","    return 'المجموعـة الخارقـة ليسـت عامـة ��' ","  else ","    data[tostring(target)]['settings']['public'] = 'no' ","   data[tostring(target)]['long_id'] = msg.to.long_id ","    save_data(_config.moderation.data, data) ","    return 'المجموعـة الخارقـة :ليست عامة ��' ","  end ","end ","","--Show supergroup settings; function ","function show_supergroup_settingsmod(msg, target) ","    if not is_momod(msg) then ","       return ","     end ","   local data = load_data(_config.moderation.data) ","    if data[tostring(target)] then ","        if data[tostring(target)]['settings']['flood_msg_max'] then ","           NUM_MSG_MAX = tonumber(data[tostring(target)]['settings']['flood_msg_max']) ","           print('custom'..NUM_MSG_MAX) ","         else ","           NUM_MSG_MAX = 5 ","         end ","    end ","   if data[tostring(target)]['settings'] then ","      if not data[tostring(target)]['settings']['public'] then ","         data[tostring(target)]['settings']['public'] = 'no' ","      end ","   end ","   if data[tostring(target)]['settings'] then ","      if not data[tostring(target)]['settings']['lock_rtl'] then ","         data[tostring(target)]['settings']['lock_rtl'] = 'no' ","      end ","   end ","   if data[tostring(target)]['settings'] then ","      if not data[tostring(target)]['settings']['lock_member'] then ","         data[tostring(target)]['settings']['lock_member'] = 'no' ","      end ","   end ","  local settings = data[tostring(target)]['settings'] ","  local text = \"�� اعدادات المجموعه  :\\n✅ منع اعلانات  : \"..settings.lock_link..\"\\n✅ منع تكرار  : \"..settings.flood..\"\\n✅ عدد التكرار  : \"..NUM_MSG_MAX..\"\\n✅ منع تفليش  : \"..settings.lock_spam..\"\\n✅ منع العربيه  : \"..settings.lock_arabic..\"\\n✅ منع الاضافه  : \"..settings.lock_member..\"\\n✅ منع الrtl   : \"..settings.lock_rtl..\"\\n✅ منع الملصقات  : \"..settings.lock_sticker..\"\\n✅ المراقبه  : \"..settings.public..\"\\n✅  قفل الوسائط  : \"..settings.strict ","  return text ","end ","local function promote_admin(receiver, member_username, user_id) ","  local data = load_data(_config.moderation.data) ","  local group = string.gsub(receiver, 'channel#id', '') ","  local member_tag_username = string.gsub(member_username, '@', '(at)') ","  if not data[group] then ","    return ","  end ","  if data[group]['moderators'][tostring(user_id)] then ","    return send_large_msg(receiver, member_username..' is already a moderator.') ","  end ","  data[group]['moderators'][tostring(user_id)] = member_tag_username ","  save_data(_config.moderation.data, data) ","end ","","local function demote_admin(receiver, member_username, user_id) ","  local data = load_data(_config.moderation.data) ","  local group = string.gsub(receiver, 'channel#id', '') ","  if not data[group] then ","    return ","  end ","  if not data[group]['moderators'][tostring(user_id)] then ","    return send_large_msg(receiver, member_tag_username..' is not a moderator.') ","  end ","  data[group]['moderators'][tostring(user_id)] = nil ","  save_data(_config.moderation.data, data) ","end ","","local function promote2(receiver, member_username, user_id) ","  local data = load_data(_config.moderation.data) ","  local group = string.gsub(receiver, 'channel#id', '') ","  local member_tag_username = string.gsub(member_username, '@', '(at)') ","  if not data[group] then ","    return send_large_msg(receiver, 'البـوت ممفعل بل كروب ��.') ","  end ","  if data[group]['moderators'][tostring(user_id)] then ","    return send_large_msg(receiver, member_username..'  هذا العضو تم رفعه ادمن مسبقا��✅') ","  end ","  data[group]['moderators'][tostring(user_id)] = member_tag_username ","  save_data(_config.moderation.data, data) ","  send_large_msg(receiver, member_username..' تم رفع العضو ادمن في المجموعه ��✅ ') ","end ","","local function demote2(receiver, member_username, user_id) ","  local data = load_data(_config.moderation.data) ","  local group = string.gsub(receiver, 'channel#id', '') ","  if not data[group] then ","    return send_large_msg(receiver, 'البـوت ممفعـل بل كـروب ��.') ","  end ","  if not data[group]['moderators'][tostring(user_id)] then ","    return send_large_msg(receiver, member_tag_username..' is not a moderator.') ","  end ","  data[group]['moderators'][tostring(user_id)] = nil ","  save_data(_config.moderation.data, data) ","  send_large_msg(receiver, member_username..' هذا الادمن تم دفره ��✔️') ","end ","","local function modlist(msg) ","  local data = load_data(_config.moderation.data) ","  local groups = \"groups\" ","  if not data[tostring(groups)][tostring(msg.to.id)] then ","    return 'البـوت ممفعـل بل كروب ��.' ","  end ","  -- determine if table is empty ","  if next(data[tostring(msg.to.id)]['moderators']) == nil then ","    return 'لا يوجد ادمنيه في المجموعه ����' ","  end ","  local i = 1 ","  local message = '\\nقائمة الادمنيه ' .. string.gsub(msg.to.print_name, '_', ' ') .. ':\\n' ","  for k,v in pairs(data[tostring(msg.to.id)]['moderators']) do ","    message = message ..i..' - '..v..' [' ..k.. '] \\n' ","    i = i + 1 ","  end ","  return message ","end ","","-- Start by reply actions ","function get_message_callback(extra, success, result) ","   local get_cmd = extra.get_cmd ","   local msg = extra.msg ","   local data = load_data(_config.moderation.data) ","   local print_name = user_print_name(msg.from):gsub(\"‮\", \"\") ","   local name_log = print_name:gsub(\"_\", \" \") ","    if get_cmd == \"id\" and not result.action then ","      local channel = 'channel#id'..result.to.peer_id ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for: [\"..result.from.peer_id..\"]\") ","      id1 = send_large_msg(channel, result.from.peer_id) ","   elseif get_cmd == 'id' and result.action then ","      local action = result.action.type ","      if action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then ","         if result.action.user then ","            user_id = result.action.user.peer_id ","         else ","            user_id = result.peer_id ","         end ","         local channel = 'channel#id'..result.to.peer_id ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id by service msg for: [\"..user_id..\"]\") ","         id1 = send_large_msg(channel, user_id) ","      end ","    elseif get_cmd == \"idfrom\" then ","      local channel = 'channel#id'..result.to.peer_id ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for msg fwd from: [\"..result.fwd_from.peer_id..\"]\") ","      id2 = send_large_msg(channel, result.fwd_from.peer_id) ","    elseif get_cmd == 'channel_block' and not result.action then ","      local member_id = result.from.peer_id ","      local channel_id = result.to.peer_id ","    if member_id == msg.from.id then ","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\") ","    end ","    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then ","            return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\") ","    end ","    if is_admin2(member_id) then ","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\") ","    end ","      --savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply\") ","      kick_user(member_id, channel_id) ","   elseif get_cmd == 'channel_block' and result.action and result.action.type == 'chat_add_user' then ","      local user_id = result.action.user.peer_id ","      local channel_id = result.to.peer_id ","    if member_id == msg.from.id then ","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\") ","    end ","    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then ","            return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\") ","    end ","    if is_admin2(member_id) then ","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\") ","    end ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply to sev. msg.\") ","      kick_user(user_id, channel_id) ","   elseif get_cmd == \"del\" then ","      delete_msg(result.id, ok_cb, false) ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] deleted a message by reply\") ","   elseif get_cmd == \"setadmin\" then ","      local user_id = result.from.peer_id ","      local channel_id = \"channel#id\"..result.to.peer_id ","      channel_set_admin(channel_id, \"user#id\"..user_id, ok_cb, false) ","      if result.from.username then ","         text = \"@\"..result.from.username..\" العضـو صـار ادمن (✔) ��\" ","      else ","         text = \"[ \"..user_id..\" ]العضـو صـار ادمن (✔) ��\" ","      end ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..user_id..\"] as admin by reply\") ","      send_large_msg(channel_id, text) ","   elseif get_cmd == \"demoteadmin\" then ","      local user_id = result.from.peer_id ","      local channel_id = \"channel#id\"..result.to.peer_id ","      if is_admin2(result.from.peer_id) then ","         return send_large_msg(channel_id, \"You can't demote global admins!\") ","      end ","      channel_demote(channel_id, \"user#id\"..user_id, ok_cb, false) ","      if result.from.username then ","         text = \"@\"..result.from.username..\" تـم تنزيـل العضـو من قائمـة الدمنيه  ��\" ","      else ","         text = \"[ \"..user_id..\" ]  تـم تنزيـل العضـو من قائمة الادمنيه �� (✔)\" ","      end ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted: [\"..user_id..\"] from admin by reply\") ","      send_large_msg(channel_id, text) ","   elseif get_cmd == \"setowner\" then ","      local group_owner = data[tostring(result.to.peer_id)]['set_owner'] ","      if group_owner then ","      local channel_id = 'channel#id'..result.to.peer_id ","         if not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then ","            local user = \"user#id\"..group_owner ","            channel_demote(channel_id, user, ok_cb, false) ","         end ","         local user_id = \"user#id\"..result.from.peer_id ","         channel_set_admin(channel_id, user_id, ok_cb, false) ","         data[tostring(result.to.peer_id)]['set_owner'] = tostring(result.from.peer_id) ","         save_data(_config.moderation.data, data) ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..result.from.peer_id..\"] as owner by reply\") ","         if result.from.username then ","            text = \"@\"..result.from.username..\" [ \"..result.from.peer_id..\" ] العضـو صـار مدير (✔) ��\" ","         else ","            text = \"[ \"..result.from.peer_id..\" ] العضـو صار مدير (✔) ��\" ","         end ","         send_large_msg(channel_id, text) ","      end ","   elseif get_cmd == \"promote\" then ","      local receiver = result.to.peer_id ","      local full_name = (result.from.first_name or '')..' '..(result.from.last_name or '') ","      local member_name = full_name:gsub(\"‮\", \"\") ","      local member_username = member_name:gsub(\"_\", \" \") ","      if result.from.username then ","         member_username = '@'.. result.from.username ","      end ","      local member_id = result.from.peer_id ","      if result.to.peer_type == 'channel' then ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted mod: @\"..member_username..\"[\"..result.from.peer_id..\"] by reply\") ","      promote2(\"channel#id\"..result.to.peer_id, member_username, member_id) ","       --channel_set_mod(channel_id, user, ok_cb, false) ","      end ","   elseif get_cmd == \"demote\" then ","      local full_name = (result.from.first_name or '')..' '..(result.from.last_name or '') ","      local member_name = full_name:gsub(\"‮\", \"\") ","      local member_username = member_name:gsub(\"_\", \" \") ","    if result.from.username then ","      member_username = '@'.. result.from.username ","    end ","      local member_id = result.from.peer_id ","      --local user = \"user#id\"..result.peer_id ","      savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted mod: @\"..member_username..\"[\"..user_id..\"] by reply\") ","      demote2(\"channel#id\"..result.to.peer_id, member_username, member_id) ","      --channel_demote(channel_id, user, ok_cb, false) ","   elseif get_cmd == 'mute_user' then ","      if result.service then ","         local action = result.action.type ","         if action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then ","            if result.action.user then ","               user_id = result.action.user.peer_id ","            end ","         end ","         if action == 'chat_add_user_link' then ","            if result.from then ","               user_id = result.from.peer_id ","            end ","         end ","      else ","         user_id = result.from.peer_id ","      end ","      local receiver = extra.receiver ","      local chat_id = msg.to.id ","      print(user_id) ","      print(chat_id) ","      if is_muted_user(chat_id, user_id) then ","         unmute_user(chat_id, user_id) ","         send_large_msg(receiver, \"[\"..user_id..\"] تـم كتـم العضـو (✔) ��\") ","      elseif is_admin1(msg) then ","         mute_user(chat_id, user_id) ","         send_large_msg(receiver, \" [\"..user_id..\"] تـم اضافـه العضـو الى قائمة المكتومين (✔) ��\") ","      end ","   end ","end ","-- End by reply actions ","","--By ID actions ","local function cb_user_info(extra, success, result) ","   local receiver = extra.receiver ","   local user_id = result.peer_id ","   local get_cmd = extra.get_cmd ","   local data = load_data(_config.moderation.data) ","   --[[if get_cmd == \"setadmin\" then ","      local user_id = \"user#id\"..result.peer_id ","      channel_set_admin(receiver, user_id, ok_cb, false) ","      if result.username then ","         text = \"@\"..result.username..\" has been set as an admin\" ","      else ","         text = \"[ \"..result.peer_id..\" ] has been set as an admin\" ","      end ","         send_large_msg(receiver, text)]] ","   if get_cmd == \"demoteadmin\" then ","      if is_admin2(result.peer_id) then ","         return send_large_msg(receiver, \"You can't demote global admins!\") ","      end ","      local user_id = \"user#id\"..result.peer_id ","      channel_demote(receiver, user_id, ok_cb, false) ","      if result.username then ","         text = \"@\"..result.username..\" تـم تنزيـل العضو من قائمة الادمنيه ��\" ","         send_large_msg(receiver, text) ","      else ","         text = \"[ \"..result.peer_id..\" ] تـم تنزيـل العضـو من قائمة الادمنيه ��\" ","         send_large_msg(receiver, text) ","      end ","   elseif get_cmd == \"promote\" then ","      if result.username then ","         member_username = \"@\"..result.username ","      else ","         member_username = string.gsub(result.print_name, '_', ' ') ","      end ","      promote2(receiver, member_username, user_id) ","   elseif get_cmd == \"demote\" then ","      if result.username then ","         member_username = \"@\"..result.username ","      else ","         member_username = string.gsub(result.print_name, '_', ' ') ","      end ","      demote2(receiver, member_username, user_id) ","   end ","end ","","-- Begin resolve username actions ","local function callbackres(extra, success, result) ","  local member_id = result.peer_id ","  local member_username = \"@\"..result.username ","  local get_cmd = extra.get_cmd ","   if get_cmd == \"res\" then ","      local user = result.peer_id ","      local name = string.gsub(result.print_name, \"_\", \" \") ","      local channel = 'channel#id'..extra.channelid ","      send_large_msg(channel, user..'\\n'..name) ","      return user ","   elseif get_cmd == \"id\" then ","      local user = result.peer_id ","      local channel = 'channel#id'..extra.channelid ","      send_large_msg(channel, user) ","      return user ","  elseif get_cmd == \"invite\" then ","    local receiver = extra.channel ","    local user_id = \"user#id\"..result.peer_id ","    channel_invite(receiver, user_id, ok_cb, false) ","   --[[elseif get_cmd == \"channel_block\" then ","      local user_id = result.peer_id ","      local channel_id = extra.channelid ","    local sender = extra.sender ","    if member_id == sender then ","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\") ","    end ","      if is_momod2(member_id, channel_id) and not is_admin2(sender) then ","            return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\") ","    end ","    if is_admin2(member_id) then ","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\") ","    end ","      kick_user(user_id, channel_id) ","   elseif get_cmd == \"setadmin\" then ","      local user_id = \"user#id\"..result.peer_id ","      local channel_id = extra.channel ","      channel_set_admin(channel_id, user_id, ok_cb, false) ","      if result.username then ","         text = \"@\"..result.username..\" has been set as an admin\" ","         send_large_msg(channel_id, text) ","      else ","         text = \"@\"..result.peer_id..\" has been set as an admin\" ","         send_large_msg(channel_id, text) ","      end ","   elseif get_cmd == \"setowner\" then ","      local receiver = extra.channel ","      local channel = string.gsub(receiver, 'channel#id', '') ","      local from_id = extra.from_id ","      local group_owner = data[tostring(channel)]['set_owner'] ","      if group_owner then ","         local user = \"user#id\"..group_owner ","         if not is_admin2(group_owner) and not is_support(group_owner) then ","            channel_demote(receiver, user, ok_cb, false) ","         end ","         local user_id = \"user#id\"..result.peer_id ","         channel_set_admin(receiver, user_id, ok_cb, false) ","         data[tostring(channel)]['set_owner'] = tostring(result.peer_id) ","         save_data(_config.moderation.data, data) ","         savelog(channel, name_log..\" [\"..from_id..\"] set [\"..result.peer_id..\"] as owner by username\") ","      if result.username then ","         text = member_username..\" [ \"..result.peer_id..\" ] added as owner\" ","      else ","         text = \"[ \"..result.peer_id..\" ] added as owner\" ","      end ","      send_large_msg(receiver, text) ","  end]] ","   elseif get_cmd == \"promote\" then ","      local receiver = extra.channel ","      local user_id = result.peer_id ","      --local user = \"user#id\"..result.peer_id ","      promote2(receiver, member_username, user_id) ","      --channel_set_mod(receiver, user, ok_cb, false) ","   elseif get_cmd == \"demote\" then ","      local receiver = extra.channel ","      local user_id = result.peer_id ","      local user = \"user#id\"..result.peer_id ","      demote2(receiver, member_username, user_id) ","   elseif get_cmd == \"demoteadmin\" then ","      local user_id = \"user#id\"..result.peer_id ","      local channel_id = extra.channel ","      if is_admin2(result.peer_id) then ","         return send_large_msg(channel_id, \"You can't demote global admins!\") ","      end ","      channel_demote(channel_id, user_id, ok_cb, false) ","      if result.username then ","         text = \"@\"..result.username..\" تـم تنزيـل العضـو من قائمة الادمنيه ��\" ","         send_large_msg(channel_id, text) ","      else ","         text = \"@\"..result.peer_id..\" تـم تنزيـل العضـو مـن قائمة الادمنيه ��\" ","         send_large_msg(channel_id, text) ","      end ","      local receiver = extra.channel ","      local user_id = result.peer_id ","      demote_admin(receiver, member_username, user_id) ","   elseif get_cmd == 'mute_user' then ","      local user_id = result.peer_id ","      local receiver = extra.receiver ","      local chat_id = string.gsub(receiver, 'channel#id', '') ","      if is_muted_user(chat_id, user_id) then ","         unmute_user(chat_id, user_id) ","         send_large_msg(receiver, \" [\"..user_id..\"] تـم كتـم العضـو ��\") ","      elseif is_owner(extra.msg) then ","         mute_user(chat_id, user_id) ","         send_large_msg(receiver, \" [\"..user_id..\"] تـم اضافـة العضـو  الى قائمة المكتومين ��\") ","      end ","   end ","end ","--End resolve username actions ","","--Begin non-channel_invite username actions ","local function in_channel_cb(cb_extra, success, result) ","  local get_cmd = cb_extra.get_cmd ","  local receiver = cb_extra.receiver ","  local msg = cb_extra.msg ","  local data = load_data(_config.moderation.data) ","  local print_name = user_print_name(cb_extra.msg.from):gsub(\"‮\", \"\") ","  local name_log = print_name:gsub(\"_\", \" \") ","  local member = cb_extra.username ","  local memberid = cb_extra.user_id ","  if member then ","    text = 'No user @'..member..' in this SuperGroup.' ","  else ","    text = 'No user ['..memberid..'] in this SuperGroup.' ","  end ","if get_cmd == \"channel_block\" then ","  for k,v in pairs(result) do ","    vusername = v.username ","    vpeer_id = tostring(v.peer_id) ","    if vusername == member or vpeer_id == memberid then ","     local user_id = v.peer_id ","     local channel_id = cb_extra.msg.to.id ","     local sender = cb_extra.msg.from.id ","      if user_id == sender then ","        return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\") ","      end ","      if is_momod2(user_id, channel_id) and not is_admin2(sender) then ","        return send_large_msg(\"channel#id\"..channel_id, \"لايمكنـك طرد - الادمنيه-المدير ��\") ","      end ","      if is_admin2(user_id) then ","        return send_large_msg(\"channel#id\"..channel_id, \"لايمكنـك طرد الادمنيه ��\") ","      end ","      if v.username then ","        text = \"\" ","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..v.username..\" [\"..v.peer_id..\"]\") ","      else ","        text = \"\" ","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..v.peer_id..\"]\") ","      end ","      kick_user(user_id, channel_id) ","    end ","  end ","elseif get_cmd == \"setadmin\" then ","   for k,v in pairs(result) do ","    vusername = v.username ","    vpeer_id = tostring(v.peer_id) ","    if vusername == member or vpeer_id == memberid then ","      local user_id = \"user#id\"..v.peer_id ","      local channel_id = \"channel#id\"..cb_extra.msg.to.id ","      channel_set_admin(channel_id, user_id, ok_cb, false) ","      if v.username then ","        text = \"@\"..v.username..\" [\"..v.peer_id..\"] تـم رفـع العضـو ادمن(✔) ��\" ","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..v.username..\" [\"..v.peer_id..\"]\") ","      else ","        text = \"[\"..v.peer_id..\"] العضـو بالفعـل ادمن ��\" ","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin \"..v.peer_id) ","      end ","     if v.username then ","      member_username = \"@\"..v.username ","     else ","      member_username = string.gsub(v.print_name, '_', ' ') ","     end ","      local receiver = channel_id ","      local user_id = v.peer_id ","      promote_admin(receiver, member_username, user_id) ","    end ","    send_large_msg(channel_id, text) "," end "," elseif get_cmd == 'setowner' then ","   for k,v in pairs(result) do ","      vusername = v.username ","      vpeer_id = tostring(v.peer_id) ","      if vusername == member or vpeer_id == memberid then ","         local channel = string.gsub(receiver, 'channel#id', '') ","         local from_id = cb_extra.msg.from.id ","         local group_owner = data[tostring(channel)]['set_owner'] ","         if group_owner then ","            if not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then ","               local user = \"user#id\"..group_owner ","               channel_demote(receiver, user, ok_cb, false) ","            end ","               local user_id = \"user#id\"..v.peer_id ","               channel_set_admin(receiver, user_id, ok_cb, false) ","               data[tostring(channel)]['set_owner'] = tostring(v.peer_id) ","               save_data(_config.moderation.data, data) ","               savelog(channel, name_log..\"[\"..from_id..\"] set [\"..v.peer_id..\"] as owner by username\") ","            if result.username then ","               text = member_username..\" [\"..v.peer_id..\"] تـم رفـع العضـو المدير (✔) ��\" ","            else ","               text = \"[\"..v.peer_id..\"] تـم رفـع العضـو الى مدير (✔) ��\" ","            end ","         end ","      elseif memberid and vusername ~= member and vpeer_id ~= memberid then ","         local channel = string.gsub(receiver, 'channel#id', '') ","         local from_id = cb_extra.msg.from.id ","         local group_owner = data[tostring(channel)]['set_owner'] ","         if group_owner then ","            if not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then ","               local user = \"user#id\"..group_owner ","               channel_demote(receiver, user, ok_cb, false) ","            end ","            data[tostring(channel)]['set_owner'] = tostring(memberid) ","            save_data(_config.moderation.data, data) ","            savelog(channel, name_log..\"[\"..from_id..\"] set [\"..memberid..\"] as owner by username\") ","            text = \"[\"..memberid..\"] تـم رفـع العضـو الى مدير (✔) ��\" ","         end ","      end ","   end "," end ","send_large_msg(receiver, text) ","end ","--End non-channel_invite username actions ","","--'Set supergroup photo' function ","local function set_supergroup_photo(msg, success, result) ","  local data = load_data(_config.moderation.data) ","  local receiver = get_receiver(msg) ","  if success then ","    local file = 'data/photos/channel_photo_'..msg.to.id..'.jpg' ","    print('File downloaded to:', result) ","    os.rename(result, file) ","    print('File moved to:', file) ","    channel_set_photo(receiver, file, ok_cb, false) ","    data[tostring(msg.to.id)]['settings']['set_photo'] = file ","    save_data(_config.moderation.data, data) ","    send_large_msg(receiver, 'Photo saved!', ok_cb, false) ","  else ","    print('Error downloading: '..msg.id) ","    send_large_msg(receiver, 'Failed, please try again!', ok_cb, false) ","  end ","end ","","--Run function ","local function run(msg, matches) ","   if msg.to.type == 'chat' then ","      if matches[1] == 'tosuper' then ","         if not is_admin1(msg) then ","            return ","         end ","         local receiver = get_receiver(msg) ","         chat_upgrade(receiver, ok_cb, false) ","      end ","   elseif msg.to.type == 'channel'then ","      if matches[1] == 'tosuper' then ","         if not is_admin1(msg) then ","            return ","         end ","         return \"المجموعـة  بالفعل خارقة\" ","      end ","   end ","   if msg.to.type == 'channel' then ","   local support_id = msg.from.id ","   local receiver = get_receiver(msg) ","   local print_name = user_print_name(msg.from):gsub(\"‮\", \"\") ","   local name_log = print_name:gsub(\"_\", \" \") ","   local data = load_data(_config.moderation.data) ","      if matches[1] == 'add' and not matches[2] then ","         if not is_admin1(msg) and not is_support(support_id) then ","            return ","         end ","         if is_super_group(msg) then ","            return reply_msg(msg.id, 'المجموعه مضافه مسبقآ ����', ok_cb, false) ","         end ","         print(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") added\") ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added SuperGroup\") ","         superadd(msg) ","         set_mutes(msg.to.id) ","         channel_set_admin(receiver, 'user#id'..msg.from.id, ok_cb, false) ","      end ","","      if matches[1] == 'rem' and is_admin1(msg) and not matches[2] then ","         if not is_super_group(msg) then ","            return reply_msg(msg.id, 'المجموعه ليس مفعله مسبقآ ����', ok_cb, false) ","         end ","         print(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") removed\") ","         superrem(msg) ","         rem_mutes(msg.to.id) ","      end ","","      if matches[1] == \"info\" then ","         if not is_owner(msg) then ","            return ","         end ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup info\") ","         channel_info(receiver, callback_info, {receiver = receiver, msg = msg}) ","      end ","","      if matches[1] == \"admins\" then ","         if not is_owner(msg) and not is_support(msg.from.id) then ","            return ","         end ","         member_type = 'Admins' ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup Admins list\") ","         admins = channel_get_admins(receiver,callback, {receiver = receiver, msg = msg, member_type = member_type}) ","      end ","","      if matches[1] == \"owner\" then ","         local group_owner = data[tostring(msg.to.id)]['set_owner'] ","         if not group_owner then ","            return \"no owner,ask admins in support groups to set owner for your SuperGroup\" ","         end ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] used /owner\") ","         return \"مدير المجموعة  [\"..group_owner..']' ","      end ","","      if matches[1] == \"modlist\" then ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group modlist\") ","         return modlist(msg) ","         -- channel_get_admins(receiver,callback, {receiver = receiver}) ","      end ","","      if matches[1] == \"bots\" and is_momod(msg) then ","         member_type = 'Bots' ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup bots list\") ","         channel_get_bots(receiver, callback, {receiver = receiver, msg = msg, member_type = member_type}) ","      end ","","      if matches[1] == \"who\" and not matches[2] and is_momod(msg) then ","         local user_id = msg.from.peer_id ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup users list\") ","         channel_get_users(receiver, callback_who, {receiver = receiver}) ","      end ","","      if matches[1] == \"kicked\" and is_momod(msg) then ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested Kicked users list\") ","         channel_get_kicked(receiver, callback_kicked, {receiver = receiver}) ","      end ","","      if matches[1] == 'del' and is_momod(msg) then ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'del', ","               msg = msg ","            } ","            delete_msg(msg.id, ok_cb, false) ","            get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         end ","      end ","","      if matches[1] == 'block' and is_momod(msg) then ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'channel_block', ","               msg = msg ","            } ","            get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'block' and string.match(matches[2], '^%d+$') then ","            --[[local user_id = matches[2] ","            local channel_id = msg.to.id ","            if is_momod2(user_id, channel_id) and not is_admin2(user_id) then ","               return send_large_msg(receiver, \"You can't kick mods/owner/admins\") ","            end ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [ user#id\"..user_id..\" ]\") ","            kick_user(user_id, channel_id)]] ","            local   get_cmd = 'channel_block' ","            local   msg = msg ","            local user_id = matches[2] ","            channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id}) ","         elseif msg.text:match(\"@[%a%d]\") then ","         --[[local cbres_extra = { ","               channelid = msg.to.id, ","               get_cmd = 'channel_block', ","               sender = msg.from.id ","            } ","             local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..username) ","            resolve_username(username, callbackres, cbres_extra)]] ","         local get_cmd = 'channel_block' ","         local msg = msg ","         local username = matches[2] ","         local username = string.gsub(matches[2], '@', '') ","         channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username}) ","         end ","      end ","","      if matches[1] == 'id' then ","         if type(msg.reply_id) ~= \"nil\" and is_momod(msg) and not matches[2] then ","            local cbreply_extra = { ","               get_cmd = 'id', ","               msg = msg ","            } ","            get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif type(msg.reply_id) ~= \"nil\" and matches[2] == \"from\" and is_momod(msg) then ","            local cbreply_extra = { ","               get_cmd = 'idfrom', ","               msg = msg ","            } ","            get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif msg.text:match(\"@[%a%d]\") then ","            local cbres_extra = { ","               channelid = msg.to.id, ","               get_cmd = 'id' ","            } ","            local username = matches[2] ","            local username = username:gsub(\"@\",\"\") ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested ID for: @\"..username) ","            resolve_username(username,  callbackres, cbres_extra) ","         else ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup ID\") ","            return \"ايدي المجموعة الخارقة \" ..string.gsub(msg.to.print_name, \"_\", \" \").. \":\\n\\n\"..msg.to.id ","         end ","      end ","","      if matches[1] == 'kickme' then ","         if msg.to.type == 'channel' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] left via kickme\") ","            channel_kick(\"channel#id\"..msg.to.id, \"user#id\"..msg.from.id, ok_cb, false) ","         end ","      end ","","      if matches[1] == 'newlink' and is_momod(msg)then ","         local function callback_link (extra , success, result) ","         local receiver = get_receiver(msg) ","            if success == 0 then ","               send_large_msg(receiver, 'حدث خطأ في  صنع الرابط السبب:ان المجموعة الخارقة ليست من صنعني لاكن  تستطيع  حفظ رابط مجموعـك عبـر ارسـال /setlink ��✔') ","               data[tostring(msg.to.id)]['settings']['set_link'] = nil ","               save_data(_config.moderation.data, data) ","            else ","               send_large_msg(receiver, \"تـم صنـع رابـط جديد ✔��\") ","               data[tostring(msg.to.id)]['settings']['set_link'] = result ","               save_data(_config.moderation.data, data) ","            end ","         end ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] attempted to create a new SuperGroup link\") ","         export_channel_link(receiver, callback_link, false) ","      end ","","      if matches[1] == 'setlink' and is_owner(msg) then ","         data[tostring(msg.to.id)]['settings']['set_link'] = 'waiting' ","         save_data(_config.moderation.data, data) ","         return 'الرجـاء ارسال رابط مجموعتـك الان ��' ","      end ","","      if msg.text then ","         if msg.text:match(\"^(https://telegram.me/joinchat/%S+)$\") and data[tostring(msg.to.id)]['settings']['set_link'] == 'waiting' and is_owner(msg) then ","            data[tostring(msg.to.id)]['settings']['set_link'] = msg.text ","            save_data(_config.moderation.data, data) ","            return \"تـم  حفظ الرابط (✔) ��\" ","         end ","      end ","","      if matches[1] == 'link' then ","         if not is_momod(msg) then ","            return ","         end ","         local group_link = data[tostring(msg.to.id)]['settings']['set_link'] ","         if not group_link then ","            return \"الرجـاء ارسال /newlink لصنع رابط جديد او ارسال /setlink لحفظ رابط مجموعتك\" ","         end ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group link [\"..group_link..\"]\") ","         return \"رابـط المجموعة ✔♦:\\n\"..group_link ","      end ","","      if matches[1] == \"invite\" and is_sudo(msg) then ","         local cbres_extra = { ","            channel = get_receiver(msg), ","            get_cmd = \"invite\" ","         } ","         local username = matches[2] ","         local username = username:gsub(\"@\",\"\") ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] invited @\"..username) ","         resolve_username(username,  callbackres, cbres_extra) ","      end ","","      if matches[1] == 'res' and is_owner(msg) then ","         local cbres_extra = { ","            channelid = msg.to.id, ","            get_cmd = 'res' ","         } ","         local username = matches[2] ","         local username = username:gsub(\"@\",\"\") ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] resolved username: @\"..username) ","         resolve_username(username,  callbackres, cbres_extra) ","      end ","","      --[[if matches[1] == 'kick' and is_momod(msg) then ","         local receiver = channel..matches[3] ","         local user = \"user#id\"..matches[2] ","         chaannel_kick(receiver, user, ok_cb, false) ","      end]] ","","         if matches[1] == 'setadmin' then ","            if not is_support(msg.from.id) and not is_owner(msg) then ","               return ","            end ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'setadmin', ","               msg = msg ","            } ","            setadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'setadmin' and string.match(matches[2], '^%d+$') then ","         --[[]   local receiver = get_receiver(msg) ","            local user_id = \"user#id\"..matches[2] ","            local get_cmd = 'setadmin' ","            user_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})]] ","            local   get_cmd = 'setadmin' ","            local   msg = msg ","            local user_id = matches[2] ","            channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id}) ","         elseif matches[1] == 'setadmin' and not string.match(matches[2], '^%d+$') then ","            --[[local cbres_extra = { ","               channel = get_receiver(msg), ","               get_cmd = 'setadmin' ","            } ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..username) ","            resolve_username(username, callbackres, cbres_extra)]] ","            local   get_cmd = 'setadmin' ","            local   msg = msg ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username}) ","         end ","      end ","","      if matches[1] == 'demoteadmin' then ","         if not is_support(msg.from.id) and not is_owner(msg) then ","            return ","         end ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'demoteadmin', ","               msg = msg ","            } ","            demoteadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'demoteadmin' and string.match(matches[2], '^%d+$') then ","            local receiver = get_receiver(msg) ","            local user_id = \"user#id\"..matches[2] ","            local get_cmd = 'demoteadmin' ","            user_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd}) ","         elseif matches[1] == 'demoteadmin' and not string.match(matches[2], '^%d+$') then ","            local cbres_extra = { ","               channel = get_receiver(msg), ","               get_cmd = 'demoteadmin' ","            } ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted admin @\"..username) ","            resolve_username(username, callbackres, cbres_extra) ","         end ","      end ","","      if matches[1] == 'setowner' and is_owner(msg) then ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'setowner', ","               msg = msg ","            } ","            setowner = get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'setowner' and string.match(matches[2], '^%d+$') then ","      --[[   local group_owner = data[tostring(msg.to.id)]['set_owner'] ","            if group_owner then ","               local receiver = get_receiver(msg) ","               local user_id = \"user#id\"..group_owner ","               if not is_admin2(group_owner) and not is_support(group_owner) then ","                  channel_demote(receiver, user_id, ok_cb, false) ","               end ","               local user = \"user#id\"..matches[2] ","               channel_set_admin(receiver, user, ok_cb, false) ","               data[tostring(msg.to.id)]['set_owner'] = tostring(matches[2]) ","               save_data(_config.moderation.data, data) ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set [\"..matches[2]..\"] as owner\") ","               local text = \"[ \"..matches[2]..\" ] added as owner\" ","               return text ","            end]] ","            local   get_cmd = 'setowner' ","            local   msg = msg ","            local user_id = matches[2] ","            channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id}) ","         elseif matches[1] == 'setowner' and not string.match(matches[2], '^%d+$') then ","            local   get_cmd = 'setowner' ","            local   msg = msg ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            channel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username}) ","         end ","      end ","","      if matches[1] == 'promote' then ","        if not is_momod(msg) then ","            return ","         end ","         if not is_owner(msg) then ","            return \"للمدراء فقط\" ","         end ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'promote', ","               msg = msg ","            } ","            promote = get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'promote' and string.match(matches[2], '^%d+$') then ","            local receiver = get_receiver(msg) ","            local user_id = \"user#id\"..matches[2] ","            local get_cmd = 'promote' ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted user#id\"..matches[2]) ","            user_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd}) ","         elseif matches[1] == 'promote' and not string.match(matches[2], '^%d+$') then ","            local cbres_extra = { ","               channel = get_receiver(msg), ","               get_cmd = 'promote', ","            } ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted @\"..username) ","            return resolve_username(username, callbackres, cbres_extra) ","         end ","      end ","","      if matches[1] == 'mp' and is_sudo(msg) then ","         channel = get_receiver(msg) ","         user_id = 'user#id'..matches[2] ","         channel_set_mod(channel, user_id, ok_cb, false) ","         return \"ok\" ","      end ","      if matches[1] == 'md' and is_sudo(msg) then ","         channel = get_receiver(msg) ","         user_id = 'user#id'..matches[2] ","         channel_demote(channel, user_id, ok_cb, false) ","         return \"ok\" ","      end ","","      if matches[1] == 'demote' then ","         if not is_momod(msg) then ","            return ","         end ","         if not is_owner(msg) then ","            return \"للمدراء فقط !\" ","         end ","         if type(msg.reply_id) ~= \"nil\" then ","            local cbreply_extra = { ","               get_cmd = 'demote', ","               msg = msg ","            } ","            demote = get_message(msg.reply_id, get_message_callback, cbreply_extra) ","         elseif matches[1] == 'demote' and string.match(matches[2], '^%d+$') then ","            local receiver = get_receiver(msg) ","            local user_id = \"user#id\"..matches[2] ","            local get_cmd = 'demote' ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted user#id\"..matches[2]) ","            user_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd}) ","         elseif not string.match(matches[2], '^%d+$') then ","            local cbres_extra = { ","               channel = get_receiver(msg), ","               get_cmd = 'demote' ","            } ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted @\"..username) ","            return resolve_username(username, callbackres, cbres_extra) ","         end ","      end ","","      if matches[1] == \"setname\" and is_momod(msg) then ","         local receiver = get_receiver(msg) ","         local set_name = string.gsub(matches[2], '_', '') ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..matches[2]) ","         rename_channel(receiver, set_name, ok_cb, false) ","      end ","","      if msg.service and msg.action.type == 'chat_rename' then ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..msg.to.title) ","         data[tostring(msg.to.id)]['settings']['set_name'] = msg.to.title ","         save_data(_config.moderation.data, data) ","      end ","","      if matches[1] == \"setabout\" and is_momod(msg) then ","         local receiver = get_receiver(msg) ","         local about_text = matches[2] ","         local data_cat = 'description' ","         local target = msg.to.id ","         data[tostring(target)][data_cat] = about_text ","         save_data(_config.moderation.data, data) ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup description to: \"..about_text) ","         channel_set_about(receiver, about_text, ok_cb, false) ","         return \"Description has been set.\\n\\nSelect the chat again to see the changes.\" ","      end ","","      if matches[1] == \"setusername\" and is_admin1(msg) then ","         local function ok_username_cb (extra, success, result) ","            local receiver = extra.receiver ","            if success == 1 then ","               send_large_msg(receiver, \"تـم وضع معرف للمجموعه {✔️}\") ","            elseif success == 0 then ","               send_large_msg(receiver, \"فشل عمله وضع معرف للمجموعه\\nالبوت ليس منشئ المجموعه ��\") ","            end ","         end ","         local username = string.gsub(matches[2], '@', '') ","         channel_set_username(receiver, username, ok_username_cb, {receiver=receiver}) ","      end ","","      if matches[1] == 'setrules' and is_momod(msg) then ","         rules = matches[2] ","         local target = msg.to.id ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] has changed group rules to [\"..matches[2]..\"]\") ","         return set_rulesmod(msg, data, target) ","      end ","","      if msg.media then ","         if msg.media.type == 'photo' and data[tostring(msg.to.id)]['settings']['set_photo'] == 'waiting' and is_momod(msg) then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] وضع صوره للمجموعة  الخارقة \") ","            load_photo(msg.id, set_supergroup_photo, msg) ","            return ","         end ","      end ","      if matches[1] == 'setphoto' and is_momod(msg) then ","         data[tostring(msg.to.id)]['settings']['set_photo'] = 'waiting' ","         save_data(_config.moderation.data, data) ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] started setting new SuperGroup photo\") ","         return 'ارسل الصوره التود  تغييرها الان ' ","      end ","","      if matches[1] == 'clean' then ","         if not is_momod(msg) then ","            return ","         end ","         if not is_momod(msg) then ","            return \"للمدراء فقط\" ","         end ","         if matches[2] == 'modlist' then ","            if next(data[tostring(msg.to.id)]['moderators']) == nil then ","               return 'لايوجد ادمنيه في المجموعة' ","            end ","            for k,v in pairs(data[tostring(msg.to.id)]['moderators']) do ","               data[tostring(msg.to.id)]['moderators'][tostring(k)] = nil ","               save_data(_config.moderation.data, data) ","            end ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned modlist\") ","            return 'تم حذف الادمنيه' ","         end ","         if matches[2] == 'rules' then ","            local data_cat = 'rules' ","            if data[tostring(msg.to.id)][data_cat] == nil then ","               return \"لايوجد قوانين للمجموعة\" ","            end ","            data[tostring(msg.to.id)][data_cat] = nil ","            save_data(_config.moderation.data, data) ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned rules\") ","            return 'تـم حذف القوانيـن !' ","         end ","         if matches[2] == 'about' then ","            local receiver = get_receiver(msg) ","            local about_text = ' ' ","            local data_cat = 'description' ","            if data[tostring(msg.to.id)][data_cat] == nil then ","               return ' لايوجد  وصف' ","            end ","            data[tostring(msg.to.id)][data_cat] = nil ","            save_data(_config.moderation.data, data) ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned about\") ","            channel_set_about(receiver, about_text, ok_cb, false) ","            return \"تـم حذف الوصف\" ","         end ","         if matches[2] == 'mutelist' then ","            chat_id = msg.to.id ","            local hash =  'mute_user:'..chat_id ","               redis:del(hash) ","            return \"تم حذف المكتومين\" ","         end ","         if matches[2] == 'username' and is_admin1(msg) then ","            local function ok_username_cb (extra, success, result) ","               local receiver = extra.receiver ","               if success == 1 then ","                  send_large_msg(receiver, \"تم حذف معرف المجموعة\") ","               elseif success == 0 then ","                  send_large_msg(receiver, \"حدث خطأ بحذف المعرف.\") ","               end ","            end ","            local username = \"\" ","            channel_set_username(receiver, username, ok_username_cb, {receiver=receiver}) ","         end ","      end ","","      if matches[1] == 'lock' and is_momod(msg) then ","         local target = msg.to.id ","         if matches[2] == 'links' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked link posting \") ","            return lock_group_links(msg, data, target) ","         end ","         if matches[2] == 'spam' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked spam \") ","            return lock_group_spam(msg, data, target) ","         end ","         if matches[2] == 'flood' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked flood \") ","            return lock_group_flood(msg, data, target) ","         end ","         if matches[2] == 'arabic' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked arabic \") ","            return lock_group_arabic(msg, data, target) ","         end ","         if matches[2] == 'member' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked member \") ","            return lock_group_membermod(msg, data, target) ","         end ","         if matches[2]:lower() == 'rtl' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked rtl chars. in names\") ","            return lock_group_rtl(msg, data, target) ","         end ","         if matches[2] == 'sticker' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked sticker posting\") ","            return lock_group_sticker(msg, data, target) ","         end ","         if matches[2] == 'contacts' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked contact posting\") ","            return lock_group_contacts(msg, data, target) ","         end ","         if matches[2] == 'strict' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked enabled strict settings\") ","            return enable_strict_rules(msg, data, target) ","         end ","      end ","","      if matches[1] == 'unlock' and is_momod(msg) then ","         local target = msg.to.id ","         if matches[2] == 'links' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked link posting\") ","            return unlock_group_links(msg, data, target) ","         end ","         if matches[2] == 'spam' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked spam\") ","            return unlock_group_spam(msg, data, target) ","         end ","         if matches[2] == 'flood' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked flood\") ","            return unlock_group_flood(msg, data, target) ","         end ","         if matches[2] == 'arabic' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked Arabic\") ","            return unlock_group_arabic(msg, data, target) ","         end ","         if matches[2] == 'member' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked member \") ","            return unlock_group_membermod(msg, data, target) ","         end ","         if matches[2]:lower() == 'rtl' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked RTL chars. in names\") ","            return unlock_group_rtl(msg, data, target) ","         end ","         if matches[2] == 'sticker' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked sticker posting\") ","            return unlock_group_sticker(msg, data, target) ","         end ","         if matches[2] == 'contacts' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked contact posting\") ","            return unlock_group_contacts(msg, data, target) ","         end ","         if matches[2] == 'strict' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked disabled strict settings\") ","            return disable_strict_rules(msg, data, target) ","         end ","      end ","","      if matches[1] == 'setflood' then ","         if not is_momod(msg) then ","            return ","         end ","         if tonumber(matches[2]) < 5 or tonumber(matches[2]) > 20 then ","            return \"Wrong number,range is [5-20]\" ","         end ","         local flood_max = matches[2] ","         data[tostring(msg.to.id)]['settings']['flood_msg_max'] = flood_max ","         save_data(_config.moderation.data, data) ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set flood to [\"..matches[2]..\"]\") ","         return 'التكـرار الاقصـى للعضو: '..matches[2] ","      end ","      if matches[1] == 'public' and is_momod(msg) then ","         local target = msg.to.id ","         if matches[2] == 'yes' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set group to: public\") ","            return set_public_membermod(msg, data, target) ","         end ","         if matches[2] == 'no' then ","            savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: not public\") ","            return unset_public_membermod(msg, data, target) ","         end ","      end ","","      if matches[1] == 'mute' and is_owner(msg) then ","         local chat_id = msg.to.id ","         if matches[2] == 'audio' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصوتيات غير ممكنه,لا يمكن استخدامها في الدردشه ������\" ","            else ","               return \" \"..msg_type..\"☑️ قفل الصوتيات مقفول بالفعل ������\" ","            end ","         end ","         if matches[2] == 'photo' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصور غير ممكنه,لا يمكن استخدامها في الدردشه ������\" ","            else ","               return \" \"..msg_type..\"☑️ قفل الصور مقفول بالفعل ������\" ","            end ","         end ","         if matches[2] == 'video' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الفيديوات غير ممكنه,لا يمكن استخدامها في الدردشه ������\" ","            else ","               return \"\"..msg_type..\"☑️ قفل الفيديوات مقفول بالفعل ������\" ","            end ","         end ","         if matches[2] == 'gifs' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصور المتحركة غير ممكنه,لا يمكن استخدامها في الدردشه ������\" ","            else ","               return \"\"..msg_type..\"☑️ قفل الصور المتحركة مقفول بالفعل ������\" ","            end ","         end ","         if matches[2] == 'documents' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\" تـم كتـم التوثيقـات(✔) ��\" ","            else ","               return \" \"..msg_type..\" التوثيقات مكتومـة الفعل ��\" ","            end ","         end ","         if matches[2] == 'text' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال الكتابة غير ممكنه,لا يمكن الاعضاء الكتابة في المجموعة ������\" ","            else ","               return \" \"..msg_type..\"☑️ قفل الكتابة مقفول بالفعل ������\" ","            end ","         end ","         if matches[2] == 'all' then ","         local msg_type = '' ","            if not is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type) ","               mute(chat_id, msg_type) ","               return \"\"..msg_type..\"☑️ اصبحت الدردشه مقفله لا,يمكن للاعضاء التكلم في المجموعة ������\" ","            else ","               return \"\"..msg_type..\"☑️ الدردشه مقفولة بالفعل ������\" ","            end ","         end ","      end ","      if matches[1] == 'unmute' and is_momod(msg) then ","         local chat_id = msg.to.id ","         if matches[2] == 'audio' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصوتيات ممكنه,يمكن استخدامها في الدردشه ������\" ","            else ","               return \" \"..msg_type..\"☑️ فتح ارسال الصوتيات مفتوح  بالفعل ������\" ","            end ","         end ","         if matches[2] == 'photo' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصور ممكنه,يمكن استخدامها في الدردشه ������\" ","            else ","               return \"\"..msg_type..\"☑️ فتح ارسال الصور مفتوح  بالفعل ������\" ","            end ","         end ","         if matches[2] == 'video' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الفيديوات ممكنه,يمكن استخدامها في الدردشه ������\" ","            else ","               return \" \"..msg_type..\"☑️ فتح ارسال الفيديوات مفتوح  بالفعل ������\" ","            end ","         end ","         if matches[2] == 'gifs' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال وتبادل الصور المتحركه ممكنه,يمكن استخدامها في الدردشه ������\" ","            else ","               return \" \"..msg_type..\"☑️ فتح ارسال الصور المتحركة مفتوح  بالفعل ������\" ","            end ","         end ","         if matches[2] == 'documents' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return msg_type..\" تـم الغـاء كتـم التوثيقـات ��\" ","            else ","               return \" \"..msg_type..\" التوثيقات ممكتومـة لتلح ��\" ","            end ","         end ","         if matches[2] == 'text' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute message\") ","               unmute(chat_id, msg_type) ","               return msg_type..\"☑️ اصبحت ارسال الكتابة ممكنه, يمكن الاعضاء الكتابة في المجموعة ������\" ","            else ","               return \"☑️ فتح ارسال الكتابة مفتوح  بالفعل ������\" ","            end ","         end ","         if matches[2] == 'all' then ","         local msg_type = '' ","            if is_muted(chat_id, msg_type..': yes') then ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type) ","               unmute(chat_id, msg_type) ","               return \" \"..msg_type..\"☑️ اصبحت الدردشه مفتوحه ,يمكن للاعضاء التكلم في المجموعة ������\" ","            else ","               return \" \"..msg_type..\"☑️ الدردشة  مفتوحة  بالفعل ������\" ","            end ","         end ","      end ","","      if matches[1] == \"muteuser\" and is_momod(msg) then ","         local chat_id = msg.to.id ","         local hash = \"mute_user\"..chat_id ","         local user_id = \"\" ","         if type(msg.reply_id) ~= \"nil\" then ","            local receiver = get_receiver(msg) ","            local get_cmd = \"mute_user\" ","            muteuser = get_message(msg.reply_id, get_message_callback, {receiver = receiver, get_cmd = get_cmd, msg = msg}) ","         elseif matches[1] == \"muteuser\" and string.match(matches[2], '^%d+$') then ","            local user_id = matches[2] ","            if is_muted_user(chat_id, user_id) then ","               unmute_user(chat_id, user_id) ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] removed [\"..user_id..\"] from the muted users list\") ","               return \"[\"..user_id..\"] تـم كتـم العضـو لان يحجي هواي ��\" ","            elseif is_owner(msg) then ","               mute_user(chat_id, user_id) ","               savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added [\"..user_id..\"] to the muted users list\") ","               return \"[\"..user_id..\"] العضـو انضاف لقائمـة المكتومين��\" ","            end ","         elseif matches[1] == \"muteuser\" and not string.match(matches[2], '^%d+$') then ","            local receiver = get_receiver(msg) ","            local get_cmd = \"mute_user\" ","            local username = matches[2] ","            local username = string.gsub(matches[2], '@', '') ","            resolve_username(username, callbackres, {receiver = receiver, get_cmd = get_cmd, msg=msg}) ","         end ","      end ","","      if matches[1] == \"muteslist\" and is_momod(msg) then ","         local chat_id = msg.to.id ","         if not has_mutes(chat_id) then ","            set_mutes(chat_id) ","            return mutes_list(chat_id) ","         end ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup muteslist\") ","         return mutes_list(chat_id) ","      end ","      if matches[1] == \"mutelist\" and is_momod(msg) then ","         local chat_id = msg.to.id ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup mutelist\") ","         return muted_user_list(chat_id) ","      end ","","      if matches[1] == 's' and is_momod(msg) then ","         local target = msg.to.id ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup settings \") ","         return show_supergroup_settingsmod(msg, target) ","      end ","","      if matches[1] == 'rules' then ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group rules\") ","         return get_rules(msg, data) ","      end ","","      if matches[1] == 'help' and not is_owner(msg) then ","         text = \"\" ","         reply_msg(msg.id, text, ok_cb, false) ","      elseif matches[1] == 'help' and is_owner(msg) then ","         local name_log = user_print_name(msg.from) ","         savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] User/superhelp \") ","         return super_help() ","      end ","","      if matches[1] == 'peer_id' and is_admin1(msg)then ","         text = msg.to.peer_id ","         reply_msg(msg.id, text, ok_cb, false) ","         post_large_msg(receiver, text) ","      end ","","      if matches[1] == 'msg.to.id' and is_admin1(msg) then ","         text = msg.to.id ","         reply_msg(msg.id, text, ok_cb, false) ","         post_large_msg(receiver, text) ","      end ","","      --Admin Join Service Message ","      if msg.service then ","      local action = msg.action.type ","         if action == 'chat_add_user_link' then ","            if is_owner2(msg.from.id) then ","               local receiver = get_receiver(msg) ","               local user = \"user#id\"..msg.from.id ","               savelog(msg.to.id, name_log..\" Admin [\"..msg.from.id..\"] joined the SuperGroup via link\") ","               channel_set_admin(receiver, user, ok_cb, false) ","            end ","            if is_support(msg.from.id) and not is_owner2(msg.from.id) then ","               local receiver = get_receiver(msg) ","               local user = \"user#id\"..msg.from.id ","               savelog(msg.to.id, name_log..\" Support member [\"..msg.from.id..\"] joined the SuperGroup\") ","               channel_set_mod(receiver, user, ok_cb, false) ","            end ","         end ","         if action == 'chat_add_user' then ","            if is_owner2(msg.action.user.id) then ","               local receiver = get_receiver(msg) ","               local user = \"user#id\"..msg.action.user.id ","               savelog(msg.to.id, name_log..\" Admin [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\") ","               channel_set_admin(receiver, user, ok_cb, false) ","            end ","            if is_support(msg.action.user.id) and not is_owner2(msg.action.user.id) then ","               local receiver = get_receiver(msg) ","               local user = \"user#id\"..msg.action.user.id ","               savelog(msg.to.id, name_log..\" Support member [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\") ","               channel_set_mod(receiver, user, ok_cb, false) ","            end ","         end ","      end ","      if matches[1] == 'msg.to.peer_id' then ","         post_large_msg(receiver, msg.to.peer_id) ","      end ","   end ","end ","","local function pre_process(msg) ","  if not msg.text and msg.media then ","    msg.text = '['..msg.media.type..']' ","  end ","  return msg ","end ","","return { ","  patterns = { ","   \"^[#!/]([Aa]dd)$\", ","   \"^[#!/]([Rr]em)$\", ","   \"^[#!/]([Mm]ove) (.*)$\", ","   \"^[#!/]([Ii]nfo)$\", ","   \"^[#!/]([Aa]dmins)$\", ","   \"^[#!/]([Oo]wner)$\", ","   \"^[#!/]([Mm]odlist)$\", ","   \"^[#!/]([Bb]ots)$\", ","   \"^[#!/]([Ww]ho)$\", ","   \"^[#!/]([Kk]icked)$\", ","    \"^[#!/]([Bb]lock) (.*)\", ","   \"^[#!/]([Bb]lock)\", ","   \"^[#!/]([Tt]osuper)$\", ","   \"^[#!/]([Ii][Dd])$\", ","   \"^[#!/]([Ii][Dd]) (.*)$\", ","   \"^[#!/]([Kk]ickme)$\", ","   \"^[#!/]([Kk]ick) (.*)$\", ","   \"^[#!/]([Nn]ewlink)$\", ","   \"^[#!/]([Ss]etlink)$\", ","   \"^[#!/]([Ll]ink)$\", ","   \"^[#!/]([Rr]es) (.*)$\", ","   \"^[#!/]([Ss]etadmin) (.*)$\", ","   \"^[#!/]([Ss]etadmin)\", ","   \"^[#!/]([Dd]emoteadmin) (.*)$\", ","   \"^[#!/]([Dd]emoteadmin)\", ","   \"^[#!/]([Ss]etowner) (.*)$\", ","   \"^[#!/]([Ss]etowner)$\", ","   \"^[#!/]([Pp]romote) (.*)$\", ","   \"^[#!/]([Pp]romote)\", ","   \"^[#!/]([Dd]emote) (.*)$\", ","   \"^[#!/]([Dd]emote)\", ","   \"^[#!/]([Ss]etname) (.*)$\", ","   \"^[#!/]([Ss]etabout) (.*)$\", ","   \"^[#!/]([Ss]etrules) (.*)$\", ","   \"^[#!/]([Ss]etphoto)$\", ","   \"^[#!/]([Ss]etusername) (.*)$\", ","   \"^[#!/]([Dd]el)$\", ","   \"^[#!/]([Ll]ock) (.*)$\", ","   \"^[#!/]([Uu]nlock) (.*)$\", ","   \"^[#!/]([Mm]ute) ([^%s]+)$\", ","   \"^[#!/]([Uu]nmute) ([^%s]+)$\", ","   \"^[#!/]([Mm]uteuser)$\", ","   \"^[#!/]([Mm]uteuser) (.*)$\", ","   \"^[#!/]([Pp]ublic) (.*)$\", ","   \"^[#!/](s)$\", ","   \"^[#!/]([Rr]ules)$\", ","   \"^[#!/]([Ss]etflood) (%d+)$\", ","   \"^[#!/]([Cc]lean) (.*)$\", ","   --\"^[#!/]([Hh]elp)$\", ","   \"^[#!/]([Mm]uteslist)$\", ","   \"^[#!/]([Mm]utelist)$\", ","    \"[#!/](mp) (.*)\", ","   \"[#!/](md) (.*)\", ","    \"^(https://telegram.me/joinchat/%S+)$\", ","   \"msg.to.peer_id\", ","   \"%[(document)%]\", ","   \"%[(photo)%]\", ","   \"%[(video)%]\", ","   \"%[(audio)%]\", ","   \"%[(contact)%]\", ","   \"^!!tgservice (.+)$\", ","  }, ","  run = run, ","  pre_process = pre_process ","} ","--End supergrpup.lua ","--By @x_s7s_x ",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":2100,"column":0},"action":"insert","lines":["﻿--Begin supergrpup.lua","--Check members #Add supergroup","local function check_member_super(cb_extra, success, result)","  local receiver = cb_extra.receiver","  local data = cb_extra.data","  local msg = cb_extra.msg","  if success == 0 then","\tsend_large_msg(receiver, \"Promote me to admin first!\")","  end","  for k,v in pairs(result) do","    local member_id = v.peer_id","    if member_id ~= our_id then","      -- SuperGroup configuration","      data[tostring(msg.to.id)] = {","        group_type = 'SuperGroup',","\t\tlong_id = msg.to.peer_id,","\t\tmoderators = {},","        set_owner = member_id ,","        settings = {","          set_name = string.gsub(msg.to.title, '_', ' '),","\t\t  lock_arabic = 'no',","\t\t  lock_link = \"no\",","          flood = 'yes',","\t\t  lock_spam = 'yes',","\t\t  lock_sticker = 'no',","\t\t  member = 'no',","\t\t  public = 'no',","\t\t  lock_rtl = 'no',","\t\t  lock_tgservice = 'yes',","\t\t  lock_contacts = 'no',","\t\t  strict = 'no'","        }","      }","      save_data(_config.moderation.data, data)","      local groups = 'groups'","      if not data[tostring(groups)] then","        data[tostring(groups)] = {}","        save_data(_config.moderation.data, data)","      end","      data[tostring(groups)][tostring(msg.to.id)] = msg.to.id","      save_data(_config.moderation.data, data)","\t  local text = 'SuperGroup has been added!'","      return reply_msg(msg.id, text, ok_cb, false)","    end","  end","end","","--Check Members #rem supergroup","local function check_member_superrem(cb_extra, success, result)","  local receiver = cb_extra.receiver","  local data = cb_extra.data","  local msg = cb_extra.msg","  for k,v in pairs(result) do","    local member_id = v.id","    if member_id ~= our_id then","\t  -- Group configuration removal","      data[tostring(msg.to.id)] = nil","      save_data(_config.moderation.data, data)","      local groups = 'groups'","      if not data[tostring(groups)] then","        data[tostring(groups)] = nil","        save_data(_config.moderation.data, data)","      end","      data[tostring(groups)][tostring(msg.to.id)] = nil","      save_data(_config.moderation.data, data)","\t  local text = 'SuperGroup has been removed'","      return reply_msg(msg.id, text, ok_cb, false)","    end","  end","end","","--Function to Add supergroup","local function superadd(msg)","\tlocal data = load_data(_config.moderation.data)","\tlocal receiver = get_receiver(msg)","    channel_get_users(receiver, check_member_super,{receiver = receiver, data = data, msg = msg})","end","","--Function to remove supergroup","local function superrem(msg)","\tlocal data = load_data(_config.moderation.data)","    local receiver = get_receiver(msg)","    channel_get_users(receiver, check_member_superrem,{receiver = receiver, data = data, msg = msg})","end","","--Get and output admins and bots in supergroup","local function callback(cb_extra, success, result)","local i = 1","local chat_name = string.gsub(cb_extra.msg.to.print_name, \"_\", \" \")","local member_type = cb_extra.member_type","local text = member_type..\" for \"..chat_name..\":\\n\"","for k,v in pairsByKeys(result) do","if not v.first_name then","\tname = \" \"","else","\tvname = v.first_name:gsub(\"‮\", \"\")","\tname = vname:gsub(\"_\", \" \")","\tend","\t\ttext = text..\"\\n\"..i..\" - \"..name..\"[\"..v.peer_id..\"]\"","\t\ti = i + 1","\tend","    send_large_msg(cb_extra.receiver, text)","end","","local function callback_clean_bots (extra, success, result)","\tlocal msg = extra.msg","\tlocal receiver = 'channel#id'..msg.to.id","\tlocal channel_id = msg.to.id","\tfor k,v in pairs(result) do","\t\tlocal bot_id = v.peer_id","\t\tkick_user(bot_id,channel_id)","\tend","end","","--Get and output info about supergroup","local function callback_info(cb_extra, success, result)","local title =\"Info for SuperGroup: [\"..result.title..\"]\\n\\n\"","local admin_num = \"Admin count: \"..result.admins_count..\"\\n\"","local user_num = \"User count: \"..result.participants_count..\"\\n\"","local kicked_num = \"Kicked user count: \"..result.kicked_count..\"\\n\"","local channel_id = \"ID: \"..result.peer_id..\"\\n\"","if result.username then","\tchannel_username = \"Username: @\"..result.username","else","\tchannel_username = \"\"","end","local text = title..admin_num..user_num..kicked_num..channel_id..channel_username","    send_large_msg(cb_extra.receiver, text)","end","","--Get and output members of supergroup","local function callback_who(cb_extra, success, result)","local text = \"Members for \"..cb_extra.receiver","local i = 1","for k,v in pairsByKeys(result) do","if not v.print_name then","\tname = \" \"","else","\tvname = v.print_name:gsub(\"‮\", \"\")","\tname = vname:gsub(\"_\", \" \")","end","\tif v.username then","\t\tusername = \" @\"..v.username","\telse","\t\tusername = \"\"","\tend","\ttext = text..\"\\n\"..i..\" - \"..name..\" \"..username..\" [ \"..v.peer_id..\" ]\\n\"","\t--text = text..\"\\n\"..username","\ti = i + 1","end","    local file = io.open(\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", \"w\")","    file:write(text)","    file:flush()","    file:close()","    send_document(cb_extra.receiver,\"./groups/lists/supergroups/\"..cb_extra.receiver..\".txt\", ok_cb, false)","\tpost_msg(cb_extra.receiver, text, ok_cb, false)","end","","--Get and output list of kicked users for supergroup","local function callback_kicked(cb_extra, success, result)","--vardump(result)","local text = \"Kicked Members for SuperGroup \"..cb_extra.receiver..\"\\n\\n\"","local i = 1","for k,v in pairsByKeys(result) do","if not v.print_name then","\tname = \" \"","else","\tvname = v.print_name:gsub(\"‮\", \"\")","\tname = vname:gsub(\"_\", \" \")","end","\tif v.username then","\t\tname = name..\" @\"..v.username","\tend","\ttext = text..\"\\n\"..i..\" - \"..name..\" [ \"..v.peer_id..\" ]\\n\"","\ti = i + 1","end","    local file = io.open(\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", \"w\")","    file:write(text)","    file:flush()","    file:close()","    send_document(cb_extra.receiver,\"./groups/lists/supergroups/kicked/\"..cb_extra.receiver..\".txt\", ok_cb, false)","\t--send_large_msg(cb_extra.receiver, text)","end","","--Begin supergroup locks","local function lock_group_links(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_link_lock = data[tostring(target)]['settings']['lock_link']","  if group_link_lock == 'yes' then","    return 'Link posting is already locked'","  else","    data[tostring(target)]['settings']['lock_link'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Link posting has been locked'","  end","end","","local function unlock_group_links(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_link_lock = data[tostring(target)]['settings']['lock_link']","  if group_link_lock == 'no' then","    return 'Link posting is not locked'","  else","    data[tostring(target)]['settings']['lock_link'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Link posting has been unlocked'","  end","end","","local function lock_group_spam(msg, data, target)","  if not is_momod(msg) then","    return","  end","  if not is_owner(msg) then","    return \"Owners only!\"","  end","  local group_spam_lock = data[tostring(target)]['settings']['lock_spam']","  if group_spam_lock == 'yes' then","    return 'SuperGroup spam is already locked'","  else","    data[tostring(target)]['settings']['lock_spam'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'SuperGroup spam has been locked'","  end","end","","local function unlock_group_spam(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_spam_lock = data[tostring(target)]['settings']['lock_spam']","  if group_spam_lock == 'no' then","    return 'SuperGroup spam is not locked'","  else","    data[tostring(target)]['settings']['lock_spam'] = 'no'","    save_data(_config.moderation.data, data)","    return 'SuperGroup spam has been unlocked'","  end","end","","local function lock_group_flood(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_flood_lock = data[tostring(target)]['settings']['flood']","  if group_flood_lock == 'yes' then","    return 'Flood is already locked'","  else","    data[tostring(target)]['settings']['flood'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Flood has been locked'","  end","end","","local function unlock_group_flood(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_flood_lock = data[tostring(target)]['settings']['flood']","  if group_flood_lock == 'no' then","    return 'Flood is not locked'","  else","    data[tostring(target)]['settings']['flood'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Flood has been unlocked'","  end","end","","local function lock_group_arabic(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic']","  if group_arabic_lock == 'yes' then","    return 'Arabic is already locked'","  else","    data[tostring(target)]['settings']['lock_arabic'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Arabic has been locked'","  end","end","","local function unlock_group_arabic(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_arabic_lock = data[tostring(target)]['settings']['lock_arabic']","  if group_arabic_lock == 'no' then","    return 'Arabic/Persian is already unlocked'","  else","    data[tostring(target)]['settings']['lock_arabic'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Arabic/Persian has been unlocked'","  end","end","","local function lock_group_membermod(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_member_lock = data[tostring(target)]['settings']['lock_member']","  if group_member_lock == 'yes' then","    return 'SuperGroup members are already locked'","  else","    data[tostring(target)]['settings']['lock_member'] = 'yes'","    save_data(_config.moderation.data, data)","  end","  return 'SuperGroup members has been locked'","end","","local function unlock_group_membermod(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_member_lock = data[tostring(target)]['settings']['lock_member']","  if group_member_lock == 'no' then","    return 'SuperGroup members are not locked'","  else","    data[tostring(target)]['settings']['lock_member'] = 'no'","    save_data(_config.moderation.data, data)","    return 'SuperGroup members has been unlocked'","  end","end","","local function lock_group_rtl(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl']","  if group_rtl_lock == 'yes' then","    return 'RTL is already locked'","  else","    data[tostring(target)]['settings']['lock_rtl'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'RTL has been locked'","  end","end","","local function unlock_group_rtl(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_rtl_lock = data[tostring(target)]['settings']['lock_rtl']","  if group_rtl_lock == 'no' then","    return 'RTL is already unlocked'","  else","    data[tostring(target)]['settings']['lock_rtl'] = 'no'","    save_data(_config.moderation.data, data)","    return 'RTL has been unlocked'","  end","end","","local function lock_group_tgservice(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_tgservice_lock = data[tostring(target)]['settings']['lock_tgservice']","  if group_tgservice_lock == 'yes' then","    return 'Tgservice is already locked'","  else","    data[tostring(target)]['settings']['lock_tgservice'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Tgservice has been locked'","  end","end","","local function unlock_group_tgservice(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_tgservice_lock = data[tostring(target)]['settings']['lock_tgservice']","  if group_tgservice_lock == 'no' then","    return 'TgService Is Not Locked!'","  else","    data[tostring(target)]['settings']['lock_tgservice'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Tgservice has been unlocked'","  end","end","","local function lock_group_sticker(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker']","  if group_sticker_lock == 'yes' then","    return 'Sticker posting is already locked'","  else","    data[tostring(target)]['settings']['lock_sticker'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Sticker posting has been locked'","  end","end","","local function unlock_group_sticker(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_sticker_lock = data[tostring(target)]['settings']['lock_sticker']","  if group_sticker_lock == 'no' then","    return 'Sticker posting is already unlocked'","  else","    data[tostring(target)]['settings']['lock_sticker'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Sticker posting has been unlocked'","  end","end","","local function lock_group_contacts(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_contacts_lock = data[tostring(target)]['settings']['lock_contacts']","  if group_contacts_lock == 'yes' then","    return 'Contact posting is already locked'","  else","    data[tostring(target)]['settings']['lock_contacts'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Contact posting has been locked'","  end","end","","local function unlock_group_contacts(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_contacts_lock = data[tostring(target)]['settings']['lock_contacts']","  if group_contacts_lock == 'no' then","    return 'Contact posting is already unlocked'","  else","    data[tostring(target)]['settings']['lock_contacts'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Contact posting has been unlocked'","  end","end","","local function enable_strict_rules(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_strict_lock = data[tostring(target)]['settings']['strict']","  if group_strict_lock == 'yes' then","    return 'Settings are already strictly enforced'","  else","    data[tostring(target)]['settings']['strict'] = 'yes'","    save_data(_config.moderation.data, data)","    return 'Settings will be strictly enforced'","  end","end","","local function disable_strict_rules(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_strict_lock = data[tostring(target)]['settings']['strict']","  if group_strict_lock == 'no' then","    return 'Settings are not strictly enforced'","  else","    data[tostring(target)]['settings']['strict'] = 'no'","    save_data(_config.moderation.data, data)","    return 'Settings will not be strictly enforced'","  end","end","--End supergroup locks","","--'Set supergroup rules' function","local function set_rulesmod(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local data_cat = 'rules'","  data[tostring(target)][data_cat] = rules","  save_data(_config.moderation.data, data)","  return 'SuperGroup rules set'","end","","--'Get supergroup rules' function","local function get_rules(msg, data)","  local data_cat = 'rules'","  if not data[tostring(msg.to.id)][data_cat] then","    return 'No rules available.'","  end","  local rules = data[tostring(msg.to.id)][data_cat]","  local group_name = data[tostring(msg.to.id)]['settings']['set_name']","  local rules = group_name..' rules:\\n\\n'..rules:gsub(\"/n\", \" \")","  return rules","end","","--Set supergroup to public or not public function","local function set_public_membermod(msg, data, target)","  if not is_momod(msg) then","    return \"For moderators only!\"","  end","  local group_public_lock = data[tostring(target)]['settings']['public']","  local long_id = data[tostring(target)]['long_id']","  if not long_id then","\tdata[tostring(target)]['long_id'] = msg.to.peer_id","\tsave_data(_config.moderation.data, data)","  end","  if group_public_lock == 'yes' then","    return 'Group is already public'","  else","    data[tostring(target)]['settings']['public'] = 'yes'","    save_data(_config.moderation.data, data)","  end","  return 'SuperGroup is now: public'","end","","local function unset_public_membermod(msg, data, target)","  if not is_momod(msg) then","    return","  end","  local group_public_lock = data[tostring(target)]['settings']['public']","  local long_id = data[tostring(target)]['long_id']","  if not long_id then","\tdata[tostring(target)]['long_id'] = msg.to.peer_id","\tsave_data(_config.moderation.data, data)","  end","  if group_public_lock == 'no' then","    return 'Group is not public'","  else","    data[tostring(target)]['settings']['public'] = 'no'","\tdata[tostring(target)]['long_id'] = msg.to.long_id","    save_data(_config.moderation.data, data)","    return 'SuperGroup is now: not public'","  end","end","","--Show supergroup settings; function","function show_supergroup_settingsmod(msg, target)"," \tif not is_momod(msg) then","    \treturn","  \tend","\tlocal data = load_data(_config.moderation.data)","    if data[tostring(target)] then","     \tif data[tostring(target)]['settings']['flood_msg_max'] then","        \tNUM_MSG_MAX = tonumber(data[tostring(target)]['settings']['flood_msg_max'])","        \tprint('custom'..NUM_MSG_MAX)","      \telse","        \tNUM_MSG_MAX = 5","      \tend","    end","\tif data[tostring(target)]['settings'] then","\t\tif not data[tostring(target)]['settings']['public'] then","\t\t\tdata[tostring(target)]['settings']['public'] = 'no'","\t\tend","\tend","\tif data[tostring(target)]['settings'] then","\t\tif not data[tostring(target)]['settings']['lock_rtl'] then","\t\t\tdata[tostring(target)]['settings']['lock_rtl'] = 'no'","\t\tend","end","      if data[tostring(target)]['settings'] then","\t\tif not data[tostring(target)]['settings']['lock_tgservice'] then","\t\t\tdata[tostring(target)]['settings']['lock_tgservice'] = 'no'","\t\tend","\tend","\tif data[tostring(target)]['settings'] then","\t\tif not data[tostring(target)]['settings']['lock_member'] then","\t\t\tdata[tostring(target)]['settings']['lock_member'] = 'no'","\t\tend","\tend","  local settings = data[tostring(target)]['settings']","  local text = \"SuperGroup settings:\\nLock links : \"..settings.lock_link..\"\\nLock flood: \"..settings.flood..\"\\nFlood sensitivity : \"..NUM_MSG_MAX..\"\\nLock spam: \"..settings.lock_spam..\"\\nLock Arabic: \"..settings.lock_arabic..\"\\nLock Member: \"..settings.lock_member..\"\\nLock RTL: \"..settings.lock_rtl..\"\\nLock Tgservice : \"..settings.lock_tgservice..\"\\nLock sticker: \"..settings.lock_sticker..\"\\nPublic: \"..settings.public..\"\\nStrict settings: \"..settings.strict","  return text","end","","local function promote_admin(receiver, member_username, user_id)","  local data = load_data(_config.moderation.data)","  local group = string.gsub(receiver, 'channel#id', '')","  local member_tag_username = string.gsub(member_username, '@', '(at)')","  if not data[group] then","    return","  end","  if data[group]['moderators'][tostring(user_id)] then","    return send_large_msg(receiver, member_username..' is already a moderator.')","  end","  data[group]['moderators'][tostring(user_id)] = member_tag_username","  save_data(_config.moderation.data, data)","end","","local function demote_admin(receiver, member_username, user_id)","  local data = load_data(_config.moderation.data)","  local group = string.gsub(receiver, 'channel#id', '')","  if not data[group] then","    return","  end","  if not data[group]['moderators'][tostring(user_id)] then","    return send_large_msg(receiver, member_tag_username..' is not a moderator.')","  end","  data[group]['moderators'][tostring(user_id)] = nil","  save_data(_config.moderation.data, data)","end","","local function promote2(receiver, member_username, user_id)","  local data = load_data(_config.moderation.data)","  local group = string.gsub(receiver, 'channel#id', '')","  local member_tag_username = string.gsub(member_username, '@', '(at)')","  if not data[group] then","    return send_large_msg(receiver, 'SuperGroup is not added.')","  end","  if data[group]['moderators'][tostring(user_id)] then","    return send_large_msg(receiver, member_username..' is already a moderator.')","  end","  data[group]['moderators'][tostring(user_id)] = member_tag_username","  save_data(_config.moderation.data, data)","  send_large_msg(receiver, member_username..' has been promoted.')","end","","local function demote2(receiver, member_username, user_id)","  local data = load_data(_config.moderation.data)","  local group = string.gsub(receiver, 'channel#id', '')","  if not data[group] then","    return send_large_msg(receiver, 'Group is not added.')","  end","  if not data[group]['moderators'][tostring(user_id)] then","    return send_large_msg(receiver, member_tag_username..' is not a moderator.')","  end","  data[group]['moderators'][tostring(user_id)] = nil","  save_data(_config.moderation.data, data)","  send_large_msg(receiver, member_username..' has been demoted.')","end","","local function modlist(msg)","  local data = load_data(_config.moderation.data)","  local groups = \"groups\"","  if not data[tostring(groups)][tostring(msg.to.id)] then","    return 'SuperGroup is not added.'","  end","  -- determine if table is empty","  if next(data[tostring(msg.to.id)]['moderators']) == nil then","    return 'No moderator in this group.'","  end","  local i = 1","  local message = '\\nList of moderators for ' .. string.gsub(msg.to.print_name, '_', ' ') .. ':\\n'","  for k,v in pairs(data[tostring(msg.to.id)]['moderators']) do","    message = message ..i..' - '..v..' [' ..k.. '] \\n'","    i = i + 1","  end","  return message","end","","-- Start by reply actions","function get_message_callback(extra, success, result)","\tlocal get_cmd = extra.get_cmd","\tlocal msg = extra.msg","\tlocal data = load_data(_config.moderation.data)","\tlocal print_name = user_print_name(msg.from):gsub(\"‮\", \"\")","\tlocal name_log = print_name:gsub(\"_\", \" \")","    if get_cmd == \"id\" and not result.action then","\t\tlocal channel = 'channel#id'..result.to.peer_id","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for: [\"..result.from.peer_id..\"]\")","\t\tid1 = send_large_msg(channel, result.from.peer_id)","\telseif get_cmd == 'id' and result.action then","\t\tlocal action = result.action.type","\t\tif action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then","\t\t\tif result.action.user then","\t\t\t\tuser_id = result.action.user.peer_id","\t\t\telse","\t\t\t\tuser_id = result.peer_id","\t\t\tend","\t\t\tlocal channel = 'channel#id'..result.to.peer_id","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id by service msg for: [\"..user_id..\"]\")","\t\t\tid1 = send_large_msg(channel, user_id)","\t\tend","    elseif get_cmd == \"idfrom\" then","\t\tlocal channel = 'channel#id'..result.to.peer_id","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] obtained id for msg fwd from: [\"..result.fwd_from.peer_id..\"]\")","\t\tid2 = send_large_msg(channel, result.fwd_from.peer_id)","    elseif get_cmd == 'channel_block' and not result.action then","\t\tlocal member_id = result.from.peer_id","\t\tlocal channel_id = result.to.peer_id","    if member_id == msg.from.id then","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")","    end","    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then","\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")","    end","    if is_admin2(member_id) then","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")","    end","\t\t--savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply\")","\t\tkick_user(member_id, channel_id)","\telseif get_cmd == 'channel_block' and result.action and result.action.type == 'chat_add_user' then","\t\tlocal user_id = result.action.user.peer_id","\t\tlocal channel_id = result.to.peer_id","    if member_id == msg.from.id then","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")","    end","    if is_momod2(member_id, channel_id) and not is_admin2(msg.from.id) then","\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")","    end","    if is_admin2(member_id) then","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")","    end","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..user_id..\"] by reply to sev. msg.\")","\t\tkick_user(user_id, channel_id)","\telseif get_cmd == \"del\" then","\t\tdelete_msg(result.id, ok_cb, false)","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] deleted a message by reply\")","\telseif get_cmd == \"setadmin\" then","\t\tlocal user_id = result.from.peer_id","\t\tlocal channel_id = \"channel#id\"..result.to.peer_id","\t\tchannel_set_admin(channel_id, \"user#id\"..user_id, ok_cb, false)","\t\tif result.from.username then","\t\t\ttext = \"@\"..result.from.username..\" set as an admin\"","\t\telse","\t\t\ttext = \"[ \"..user_id..\" ]set as an admin\"","\t\tend","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..user_id..\"] as admin by reply\")","\t\tsend_large_msg(channel_id, text)","\telseif get_cmd == \"demoteadmin\" then","\t\tlocal user_id = result.from.peer_id","\t\tlocal channel_id = \"channel#id\"..result.to.peer_id","\t\tif is_admin2(result.from.peer_id) then","\t\t\treturn send_large_msg(channel_id, \"You can't demote global admins!\")","\t\tend","\t\tchannel_demote(channel_id, \"user#id\"..user_id, ok_cb, false)","\t\tif result.from.username then","\t\t\ttext = \"@\"..result.from.username..\" has been demoted from admin\"","\t\telse","\t\t\ttext = \"[ \"..user_id..\" ] has been demoted from admin\"","\t\tend","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted: [\"..user_id..\"] from admin by reply\")","\t\tsend_large_msg(channel_id, text)","\telseif get_cmd == \"setowner\" then","\t\tlocal group_owner = data[tostring(result.to.peer_id)]['set_owner']","\t\tif group_owner then","\t\tlocal channel_id = 'channel#id'..result.to.peer_id","\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then","\t\t\t\tlocal user = \"user#id\"..group_owner","\t\t\t\tchannel_demote(channel_id, user, ok_cb, false)","\t\t\tend","\t\t\tlocal user_id = \"user#id\"..result.from.peer_id","\t\t\tchannel_set_admin(channel_id, user_id, ok_cb, false)","\t\t\tdata[tostring(result.to.peer_id)]['set_owner'] = tostring(result.from.peer_id)","\t\t\tsave_data(_config.moderation.data, data)","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set: [\"..result.from.peer_id..\"] as owner by reply\")","\t\t\tif result.from.username then","\t\t\t\ttext = \"@\"..result.from.username..\" [ \"..result.from.peer_id..\" ] added as owner\"","\t\t\telse","\t\t\t\ttext = \"[ \"..result.from.peer_id..\" ] added as owner\"","\t\t\tend","\t\t\tsend_large_msg(channel_id, text)","\t\tend","\telseif get_cmd == \"promote\" then","\t\tlocal receiver = result.to.peer_id","\t\tlocal full_name = (result.from.first_name or '')..' '..(result.from.last_name or '')","\t\tlocal member_name = full_name:gsub(\"‮\", \"\")","\t\tlocal member_username = member_name:gsub(\"_\", \" \")","\t\tif result.from.username then","\t\t\tmember_username = '@'.. result.from.username","\t\tend","\t\tlocal member_id = result.from.peer_id","\t\tif result.to.peer_type == 'channel' then","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted mod: @\"..member_username..\"[\"..result.from.peer_id..\"] by reply\")","\t\tpromote2(\"channel#id\"..result.to.peer_id, member_username, member_id)","\t    --channel_set_mod(channel_id, user, ok_cb, false)","\t\tend","\telseif get_cmd == \"demote\" then","\t\tlocal full_name = (result.from.first_name or '')..' '..(result.from.last_name or '')","\t\tlocal member_name = full_name:gsub(\"‮\", \"\")","\t\tlocal member_username = member_name:gsub(\"_\", \" \")","    if result.from.username then","\t\tmember_username = '@'.. result.from.username","    end","\t\tlocal member_id = result.from.peer_id","\t\t--local user = \"user#id\"..result.peer_id","\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted mod: @\"..member_username..\"[\"..user_id..\"] by reply\")","\t\tdemote2(\"channel#id\"..result.to.peer_id, member_username, member_id)","\t\t--channel_demote(channel_id, user, ok_cb, false)","\telseif get_cmd == 'mute_user' then","\t\tif result.service then","\t\t\tlocal action = result.action.type","\t\t\tif action == 'chat_add_user' or action == 'chat_del_user' or action == 'chat_rename' or action == 'chat_change_photo' then","\t\t\t\tif result.action.user then","\t\t\t\t\tuser_id = result.action.user.peer_id","\t\t\t\tend","\t\t\tend","\t\t\tif action == 'chat_add_user_link' then","\t\t\t\tif result.from then","\t\t\t\t\tuser_id = result.from.peer_id","\t\t\t\tend","\t\t\tend","\t\telse","\t\t\tuser_id = result.from.peer_id","\t\tend","\t\tlocal receiver = extra.receiver","\t\tlocal chat_id = msg.to.id","\t\tprint(user_id)","\t\tprint(chat_id)","\t\tif is_muted_user(chat_id, user_id) then","\t\t\tunmute_user(chat_id, user_id)","\t\t\tsend_large_msg(receiver, \"[\"..user_id..\"] removed from the muted user list\")","\t\telseif is_admin1(msg) then","\t\t\tmute_user(chat_id, user_id)","\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] added to the muted user list\")","\t\tend","\tend","end","-- End by reply actions","","--By ID actions","local function cb_user_info(extra, success, result)","\tlocal receiver = extra.receiver","\tlocal user_id = result.peer_id","\tlocal get_cmd = extra.get_cmd","\tlocal data = load_data(_config.moderation.data)","\t--[[if get_cmd == \"setadmin\" then","\t\tlocal user_id = \"user#id\"..result.peer_id","\t\tchannel_set_admin(receiver, user_id, ok_cb, false)","\t\tif result.username then","\t\t\ttext = \"@\"..result.username..\" has been set as an admin\"","\t\telse","\t\t\ttext = \"[ \"..result.peer_id..\" ] has been set as an admin\"","\t\tend","\t\t\tsend_large_msg(receiver, text)]]","\tif get_cmd == \"demoteadmin\" then","\t\tif is_admin2(result.peer_id) then","\t\t\treturn send_large_msg(receiver, \"You can't demote global admins!\")","\t\tend","\t\tlocal user_id = \"user#id\"..result.peer_id","\t\tchannel_demote(receiver, user_id, ok_cb, false)","\t\tif result.username then","\t\t\ttext = \"@\"..result.username..\" has been demoted from admin\"","\t\t\tsend_large_msg(receiver, text)","\t\telse","\t\t\ttext = \"[ \"..result.peer_id..\" ] has been demoted from admin\"","\t\t\tsend_large_msg(receiver, text)","\t\tend","\telseif get_cmd == \"promote\" then","\t\tif result.username then","\t\t\tmember_username = \"@\"..result.username","\t\telse","\t\t\tmember_username = string.gsub(result.print_name, '_', ' ')","\t\tend","\t\tpromote2(receiver, member_username, user_id)","\telseif get_cmd == \"demote\" then","\t\tif result.username then","\t\t\tmember_username = \"@\"..result.username","\t\telse","\t\t\tmember_username = string.gsub(result.print_name, '_', ' ')","\t\tend","\t\tdemote2(receiver, member_username, user_id)","\tend","end","","-- Begin resolve username actions","local function callbackres(extra, success, result)","  local member_id = result.peer_id","  local member_username = \"@\"..result.username","  local get_cmd = extra.get_cmd","\tif get_cmd == \"res\" then","\t\tlocal user = result.peer_id","\t\tlocal name = string.gsub(result.print_name, \"_\", \" \")","\t\tlocal channel = 'channel#id'..extra.channelid","\t\tsend_large_msg(channel, user..'\\n'..name)","\t\treturn user","\telseif get_cmd == \"id\" then","\t\tlocal user = result.peer_id","\t\tlocal channel = 'channel#id'..extra.channelid","\t\tsend_large_msg(channel, user)","\t\treturn user","  elseif get_cmd == \"invite\" then","    local receiver = extra.channel","    local user_id = \"user#id\"..result.peer_id","    channel_invite(receiver, user_id, ok_cb, false)","\t--[[elseif get_cmd == \"channel_block\" then","\t\tlocal user_id = result.peer_id","\t\tlocal channel_id = extra.channelid","    local sender = extra.sender","    if member_id == sender then","      return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")","    end","\t\tif is_momod2(member_id, channel_id) and not is_admin2(sender) then","\t\t\t   return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")","    end","    if is_admin2(member_id) then","         return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")","    end","\t\tkick_user(user_id, channel_id)","\telseif get_cmd == \"setadmin\" then","\t\tlocal user_id = \"user#id\"..result.peer_id","\t\tlocal channel_id = extra.channel","\t\tchannel_set_admin(channel_id, user_id, ok_cb, false)","\t\tif result.username then","\t\t\ttext = \"@\"..result.username..\" has been set as an admin\"","\t\t\tsend_large_msg(channel_id, text)","\t\telse","\t\t\ttext = \"@\"..result.peer_id..\" has been set as an admin\"","\t\t\tsend_large_msg(channel_id, text)","\t\tend","\telseif get_cmd == \"setowner\" then","\t\tlocal receiver = extra.channel","\t\tlocal channel = string.gsub(receiver, 'channel#id', '')","\t\tlocal from_id = extra.from_id","\t\tlocal group_owner = data[tostring(channel)]['set_owner']","\t\tif group_owner then","\t\t\tlocal user = \"user#id\"..group_owner","\t\t\tif not is_admin2(group_owner) and not is_support(group_owner) then","\t\t\t\tchannel_demote(receiver, user, ok_cb, false)","\t\t\tend","\t\t\tlocal user_id = \"user#id\"..result.peer_id","\t\t\tchannel_set_admin(receiver, user_id, ok_cb, false)","\t\t\tdata[tostring(channel)]['set_owner'] = tostring(result.peer_id)","\t\t\tsave_data(_config.moderation.data, data)","\t\t\tsavelog(channel, name_log..\" [\"..from_id..\"] set [\"..result.peer_id..\"] as owner by username\")","\t\tif result.username then","\t\t\ttext = member_username..\" [ \"..result.peer_id..\" ] added as owner\"","\t\telse","\t\t\ttext = \"[ \"..result.peer_id..\" ] added as owner\"","\t\tend","\t\tsend_large_msg(receiver, text)","  end]]","\telseif get_cmd == \"promote\" then","\t\tlocal receiver = extra.channel","\t\tlocal user_id = result.peer_id","\t\t--local user = \"user#id\"..result.peer_id","\t\tpromote2(receiver, member_username, user_id)","\t\t--channel_set_mod(receiver, user, ok_cb, false)","\telseif get_cmd == \"demote\" then","\t\tlocal receiver = extra.channel","\t\tlocal user_id = result.peer_id","\t\tlocal user = \"user#id\"..result.peer_id","\t\tdemote2(receiver, member_username, user_id)","\telseif get_cmd == \"demoteadmin\" then","\t\tlocal user_id = \"user#id\"..result.peer_id","\t\tlocal channel_id = extra.channel","\t\tif is_admin2(result.peer_id) then","\t\t\treturn send_large_msg(channel_id, \"You can't demote global admins!\")","\t\tend","\t\tchannel_demote(channel_id, user_id, ok_cb, false)","\t\tif result.username then","\t\t\ttext = \"@\"..result.username..\" has been demoted from admin\"","\t\t\tsend_large_msg(channel_id, text)","\t\telse","\t\t\ttext = \"@\"..result.peer_id..\" has been demoted from admin\"","\t\t\tsend_large_msg(channel_id, text)","\t\tend","\t\tlocal receiver = extra.channel","\t\tlocal user_id = result.peer_id","\t\tdemote_admin(receiver, member_username, user_id)","\telseif get_cmd == 'mute_user' then","\t\tlocal user_id = result.peer_id","\t\tlocal receiver = extra.receiver","\t\tlocal chat_id = string.gsub(receiver, 'channel#id', '')","\t\tif is_muted_user(chat_id, user_id) then","\t\t\tunmute_user(chat_id, user_id)","\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] removed from muted user list\")","\t\telseif is_owner(extra.msg) then","\t\t\tmute_user(chat_id, user_id)","\t\t\tsend_large_msg(receiver, \" [\"..user_id..\"] added to muted user list\")","\t\tend","\tend","end","--End resolve username actions","","--Begin non-channel_invite username actions","local function in_channel_cb(cb_extra, success, result)","  local get_cmd = cb_extra.get_cmd","  local receiver = cb_extra.receiver","  local msg = cb_extra.msg","  local data = load_data(_config.moderation.data)","  local print_name = user_print_name(cb_extra.msg.from):gsub(\"‮\", \"\")","  local name_log = print_name:gsub(\"_\", \" \")","  local member = cb_extra.username","  local memberid = cb_extra.user_id","  if member then","    text = 'No user @'..member..' in this SuperGroup.'","  else","    text = 'No user ['..memberid..'] in this SuperGroup.'","  end","if get_cmd == \"channel_block\" then","  for k,v in pairs(result) do","    vusername = v.username","    vpeer_id = tostring(v.peer_id)","    if vusername == member or vpeer_id == memberid then","     local user_id = v.peer_id","     local channel_id = cb_extra.msg.to.id","     local sender = cb_extra.msg.from.id","      if user_id == sender then","        return send_large_msg(\"channel#id\"..channel_id, \"Leave using kickme command\")","      end","      if is_momod2(user_id, channel_id) and not is_admin2(sender) then","        return send_large_msg(\"channel#id\"..channel_id, \"You can't kick mods/owner/admins\")","      end","      if is_admin2(user_id) then","        return send_large_msg(\"channel#id\"..channel_id, \"You can't kick other admins\")","      end","      if v.username then","        text = \"\"","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..v.username..\" [\"..v.peer_id..\"]\")","      else","        text = \"\"","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [\"..v.peer_id..\"]\")","      end","      kick_user(user_id, channel_id)","      return","    end","  end","elseif get_cmd == \"setadmin\" then","   for k,v in pairs(result) do","    vusername = v.username","    vpeer_id = tostring(v.peer_id)","    if vusername == member or vpeer_id == memberid then","      local user_id = \"user#id\"..v.peer_id","      local channel_id = \"channel#id\"..cb_extra.msg.to.id","      channel_set_admin(channel_id, user_id, ok_cb, false)","      if v.username then","        text = \"@\"..v.username..\" [\"..v.peer_id..\"] has been set as an admin\"","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..v.username..\" [\"..v.peer_id..\"]\")","      else","        text = \"[\"..v.peer_id..\"] has been set as an admin\"","        savelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin \"..v.peer_id)","      end","\t  if v.username then","\t\tmember_username = \"@\"..v.username","\t  else","\t\tmember_username = string.gsub(v.print_name, '_', ' ')","\t  end","\t\tlocal receiver = channel_id","\t\tlocal user_id = v.peer_id","\t\tpromote_admin(receiver, member_username, user_id)","","    end","    send_large_msg(channel_id, text)","    return"," end"," elseif get_cmd == 'setowner' then","\tfor k,v in pairs(result) do","\t\tvusername = v.username","\t\tvpeer_id = tostring(v.peer_id)","\t\tif vusername == member or vpeer_id == memberid then","\t\t\tlocal channel = string.gsub(receiver, 'channel#id', '')","\t\t\tlocal from_id = cb_extra.msg.from.id","\t\t\tlocal group_owner = data[tostring(channel)]['set_owner']","\t\t\tif group_owner then","\t\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then","\t\t\t\t\tlocal user = \"user#id\"..group_owner","\t\t\t\t\tchannel_demote(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\t\t\tlocal user_id = \"user#id\"..v.peer_id","\t\t\t\t\tchannel_set_admin(receiver, user_id, ok_cb, false)","\t\t\t\t\tdata[tostring(channel)]['set_owner'] = tostring(v.peer_id)","\t\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\t\tsavelog(channel, name_log..\"[\"..from_id..\"] set [\"..v.peer_id..\"] as owner by username\")","\t\t\t\tif result.username then","\t\t\t\t\ttext = member_username..\" [\"..v.peer_id..\"] added as owner\"","\t\t\t\telse","\t\t\t\t\ttext = \"[\"..v.peer_id..\"] added as owner\"","\t\t\t\tend","\t\t\tend","\t\telseif memberid and vusername ~= member and vpeer_id ~= memberid then","\t\t\tlocal channel = string.gsub(receiver, 'channel#id', '')","\t\t\tlocal from_id = cb_extra.msg.from.id","\t\t\tlocal group_owner = data[tostring(channel)]['set_owner']","\t\t\tif group_owner then","\t\t\t\tif not is_admin2(tonumber(group_owner)) and not is_support(tonumber(group_owner)) then","\t\t\t\t\tlocal user = \"user#id\"..group_owner","\t\t\t\t\tchannel_demote(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\t\tdata[tostring(channel)]['set_owner'] = tostring(memberid)","\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\tsavelog(channel, name_log..\"[\"..from_id..\"] set [\"..memberid..\"] as owner by username\")","\t\t\t\ttext = \"[\"..memberid..\"] added as owner\"","\t\t\tend","\t\tend","\tend"," end","send_large_msg(receiver, text)","end","--End non-channel_invite username actions","","--'Set supergroup photo' function","local function set_supergroup_photo(msg, success, result)","  local data = load_data(_config.moderation.data)","  if not data[tostring(msg.to.id)] then","      return","  end","  local receiver = get_receiver(msg)","  if success then","    local file = 'data/photos/channel_photo_'..msg.to.id..'.jpg'","    print('File downloaded to:', result)","    os.rename(result, file)","    print('File moved to:', file)","    channel_set_photo(receiver, file, ok_cb, false)","    data[tostring(msg.to.id)]['settings']['set_photo'] = file","    save_data(_config.moderation.data, data)","    send_large_msg(receiver, 'Photo saved!', ok_cb, false)","  else","    print('Error downloading: '..msg.id)","    send_large_msg(receiver, 'Failed, please try again!', ok_cb, false)","  end","end","","--Run function","local function run(msg, matches)","\tif msg.to.type == 'chat' then","\t\tif matches[1] == 'tosuper' then","\t\t\tif not is_admin1(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tlocal receiver = get_receiver(msg)","\t\t\tchat_upgrade(receiver, ok_cb, false)","\t\tend","\telseif msg.to.type == 'channel'then","\t\tif matches[1] == 'tosuper' then","\t\t\tif not is_admin1(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\treturn \"Already a SuperGroup\"","\t\tend","\tend","\tif msg.to.type == 'channel' then","\tlocal support_id = msg.from.id","\tlocal receiver = get_receiver(msg)","\tlocal print_name = user_print_name(msg.from):gsub(\"‮\", \"\")","\tlocal name_log = print_name:gsub(\"_\", \" \")","\tlocal data = load_data(_config.moderation.data)","\t\tif matches[1] == 'add' and not matches[2] then","\t\t\tif not is_admin1(msg) and not is_support(support_id) then","\t\t\t\treturn","\t\t\tend","\t\t\tif is_super_group(msg) then","\t\t\t\treturn reply_msg(msg.id, 'SuperGroup is already added.', ok_cb, false)","\t\t\tend","\t\t\tprint(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") added\")","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added SuperGroup\")","\t\t\tsuperadd(msg)","\t\t\tset_mutes(msg.to.id)","\t\t\tchannel_set_admin(receiver, 'user#id'..msg.from.id, ok_cb, false)","\t\tend","","\t\tif matches[1] == 'rem' and is_admin1(msg) and not matches[2] then","\t\t\tif not is_super_group(msg) then","\t\t\t\treturn reply_msg(msg.id, 'SuperGroup is not added.', ok_cb, false)","\t\t\tend","\t\t\tprint(\"SuperGroup \"..msg.to.print_name..\"(\"..msg.to.id..\") removed\")","\t\t\tsuperrem(msg)","\t\t\trem_mutes(msg.to.id)","\t\tend","","\t\tif not data[tostring(msg.to.id)] then","\t\t\treturn","\t\tend","\t\tif matches[1] == \"info\" then","\t\t\tif not is_owner(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup info\")","\t\t\tchannel_info(receiver, callback_info, {receiver = receiver, msg = msg})","\t\tend","","\t\tif matches[1] == \"admins\" then","\t\t\tif not is_owner(msg) and not is_support(msg.from.id) then","\t\t\t\treturn","\t\t\tend","\t\t\tmember_type = 'Admins'","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup Admins list\")","\t\t\tadmins = channel_get_admins(receiver,callback, {receiver = receiver, msg = msg, member_type = member_type})","\t\tend","","\t\tif matches[1] == \"owner\" then","\t\t\tlocal group_owner = data[tostring(msg.to.id)]['set_owner']","\t\t\tif not group_owner then","\t\t\t\treturn \"no owner,ask admins in support groups to set owner for your SuperGroup\"","\t\t\tend","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] used /owner\")","\t\t\treturn \"SuperGroup owner is [\"..group_owner..']'","\t\tend","","\t\tif matches[1] == \"modlist\" then","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group modlist\")","\t\t\treturn modlist(msg)","\t\t\t-- channel_get_admins(receiver,callback, {receiver = receiver})","\t\tend","","\t\tif matches[1] == \"bots\" and is_momod(msg) then","\t\t\tmember_type = 'Bots'","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup bots list\")","\t\t\tchannel_get_bots(receiver, callback, {receiver = receiver, msg = msg, member_type = member_type})","\t\tend","","\t\tif matches[1] == \"who\" and not matches[2] and is_momod(msg) then","\t\t\tlocal user_id = msg.from.peer_id","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup users list\")","\t\t\tchannel_get_users(receiver, callback_who, {receiver = receiver})","\t\tend","","\t\tif matches[1] == \"kicked\" and is_momod(msg) then","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested Kicked users list\")","\t\t\tchannel_get_kicked(receiver, callback_kicked, {receiver = receiver})","\t\tend","","\t\tif matches[1] == 'del' and is_momod(msg) then","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'del',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tdelete_msg(msg.id, ok_cb, false)","\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'block' and is_momod(msg) then","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'channel_block',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'block' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t\t--[[local user_id = matches[2]","\t\t\t\tlocal channel_id = msg.to.id","\t\t\t\tif is_momod2(user_id, channel_id) and not is_admin2(user_id) then","\t\t\t\t\treturn send_large_msg(receiver, \"You can't kick mods/owner/admins\")","\t\t\t\tend","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: [ user#id\"..user_id..\" ]\")","\t\t\t\tkick_user(user_id, channel_id)]]","\t\t\t\tlocal get_cmd = 'channel_block'","\t\t\t\tlocal msg = msg","\t\t\t\tlocal user_id = matches[2]","\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})","\t\t\telseif matches[1] == \"block\" and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t--[[local cbres_extra = {","\t\t\t\t\tchannelid = msg.to.id,","\t\t\t\t\tget_cmd = 'channel_block',","\t\t\t\t\tsender = msg.from.id","\t\t\t\t}","\t\t\t    local username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked: @\"..username)","\t\t\t\tresolve_username(username, callbackres, cbres_extra)]]","\t\t\tlocal get_cmd = 'channel_block'","\t\t\tlocal msg = msg","\t\t\tlocal username = matches[2]","\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})","\t\t\tend","\t\tend","","\t\tif matches[1] == 'id' then","\t\t\tif type(msg.reply_id) ~= \"nil\" and is_momod(msg) and not matches[2] then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'id',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif type(msg.reply_id) ~= \"nil\" and matches[2] == \"from\" and is_momod(msg) then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'idfrom',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tget_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif msg.text:match(\"@[%a%d]\") then","\t\t\t\tlocal cbres_extra = {","\t\t\t\t\tchannelid = msg.to.id,","\t\t\t\t\tget_cmd = 'id'","\t\t\t\t}","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = username:gsub(\"@\",\"\")","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested ID for: @\"..username)","\t\t\t\tresolve_username(username,  callbackres, cbres_extra)","\t\t\telse","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup ID\")","\t\t\t\treturn \"SuperGroup ID for \" ..string.gsub(msg.to.print_name, \"_\", \" \").. \":\\n\\n\"..msg.to.id","\t\t\tend","\t\tend","","\t\tif matches[1] == 'kickme' then","\t\t\tif msg.to.type == 'channel' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] left via kickme\")","\t\t\t\tchannel_kick(\"channel#id\"..msg.to.id, \"user#id\"..msg.from.id, ok_cb, false)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'newlink' and is_momod(msg)then","\t\t\tlocal function callback_link (extra , success, result)","\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tif success == 0 then","\t\t\t\t\tsend_large_msg(receiver, '*Error: Failed to retrieve link* \\nReason: Not creator.\\n\\nIf you have the link, please use /setlink to set it')","\t\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = nil","\t\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\telse","\t\t\t\t\tsend_large_msg(receiver, \"Created a new link\")","\t\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = result","\t\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\tend","\t\t\tend","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] attempted to create a new SuperGroup link\")","\t\t\texport_channel_link(receiver, callback_link, false)","\t\tend","","\t\tif matches[1] == 'setlink' and is_owner(msg) then","\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = 'waiting'","\t\t\tsave_data(_config.moderation.data, data)","\t\t\treturn 'Please send the new group link now'","\t\tend","","\t\tif msg.text then","\t\t\tif msg.text:match(\"^(https://telegram.me/joinchat/%S+)$\") and data[tostring(msg.to.id)]['settings']['set_link'] == 'waiting' and is_owner(msg) then","\t\t\t\tdata[tostring(msg.to.id)]['settings']['set_link'] = msg.text","\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\treturn \"New link set\"","\t\t\tend","\t\tend","","\t\tif matches[1] == 'link' then","\t\t\tif not is_momod(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tlocal group_link = data[tostring(msg.to.id)]['settings']['set_link']","\t\t\tif not group_link then","\t\t\t\treturn \"Create a link using /newlink first!\\n\\nOr if I am not creator use /setlink to set your link\"","\t\t\tend","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group link [\"..group_link..\"]\")","\t\t\treturn \"Group link:\\n\"..group_link","\t\tend","","\t\tif matches[1] == \"invite\" and is_sudo(msg) then","\t\t\tlocal cbres_extra = {","\t\t\t\tchannel = get_receiver(msg),","\t\t\t\tget_cmd = \"invite\"","\t\t\t}","\t\t\tlocal username = matches[2]","\t\t\tlocal username = username:gsub(\"@\",\"\")","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] invited @\"..username)","\t\t\tresolve_username(username,  callbackres, cbres_extra)","\t\tend","","\t\tif matches[1] == 'res' and is_owner(msg) then","\t\t\tlocal cbres_extra = {","\t\t\t\tchannelid = msg.to.id,","\t\t\t\tget_cmd = 'res'","\t\t\t}","\t\t\tlocal username = matches[2]","\t\t\tlocal username = username:gsub(\"@\",\"\")","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] resolved username: @\"..username)","\t\t\tresolve_username(username,  callbackres, cbres_extra)","\t\tend","","\t\t--[[if matches[1] == 'kick' and is_momod(msg) then","\t\t\tlocal receiver = channel..matches[3]","\t\t\tlocal user = \"user#id\"..matches[2]","\t\t\tchaannel_kick(receiver, user, ok_cb, false)","\t\tend]]","","\t\t\tif matches[1] == 'setadmin' then","\t\t\t\tif not is_support(msg.from.id) and not is_owner(msg) then","\t\t\t\t\treturn","\t\t\t\tend","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'setadmin',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tsetadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'setadmin' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t--[[]\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal user_id = \"user#id\"..matches[2]","\t\t\t\tlocal get_cmd = 'setadmin'","\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})]]","\t\t\t\tlocal get_cmd = 'setadmin'","\t\t\t\tlocal msg = msg","\t\t\t\tlocal user_id = matches[2]","\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})","\t\t\telseif matches[1] == 'setadmin' and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\t--[[local cbres_extra = {","\t\t\t\t\tchannel = get_receiver(msg),","\t\t\t\t\tget_cmd = 'setadmin'","\t\t\t\t}","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set admin @\"..username)","\t\t\t\tresolve_username(username, callbackres, cbres_extra)]]","\t\t\t\tlocal get_cmd = 'setadmin'","\t\t\t\tlocal msg = msg","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})","\t\t\tend","\t\tend","","\t\tif matches[1] == 'demoteadmin' then","\t\t\tif not is_support(msg.from.id) and not is_owner(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'demoteadmin',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tdemoteadmin = get_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'demoteadmin' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal user_id = \"user#id\"..matches[2]","\t\t\t\tlocal get_cmd = 'demoteadmin'","\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})","\t\t\telseif matches[1] == 'demoteadmin' and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\tlocal cbres_extra = {","\t\t\t\t\tchannel = get_receiver(msg),","\t\t\t\t\tget_cmd = 'demoteadmin'","\t\t\t\t}","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted admin @\"..username)","\t\t\t\tresolve_username(username, callbackres, cbres_extra)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'setowner' and is_owner(msg) then","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'setowner',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tsetowner = get_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'setowner' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t--[[\tlocal group_owner = data[tostring(msg.to.id)]['set_owner']","\t\t\t\tif group_owner then","\t\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\t\tlocal user_id = \"user#id\"..group_owner","\t\t\t\t\tif not is_admin2(group_owner) and not is_support(group_owner) then","\t\t\t\t\t\tchannel_demote(receiver, user_id, ok_cb, false)","\t\t\t\t\tend","\t\t\t\t\tlocal user = \"user#id\"..matches[2]","\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)","\t\t\t\t\tdata[tostring(msg.to.id)]['set_owner'] = tostring(matches[2])","\t\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set [\"..matches[2]..\"] as owner\")","\t\t\t\t\tlocal text = \"[ \"..matches[2]..\" ] added as owner\"","\t\t\t\t\treturn text","\t\t\t\tend]]","\t\t\t\tlocal\tget_cmd = 'setowner'","\t\t\t\tlocal\tmsg = msg","\t\t\t\tlocal user_id = matches[2]","\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, user_id=user_id})","\t\t\telseif matches[1] == 'setowner' and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\tlocal\tget_cmd = 'setowner'","\t\t\t\tlocal\tmsg = msg","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tchannel_get_users (receiver, in_channel_cb, {get_cmd=get_cmd, receiver=receiver, msg=msg, username=username})","\t\t\tend","\t\tend","","\t\tif matches[1] == 'promote' then","\t\t  if not is_momod(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tif not is_owner(msg) then","\t\t\t\treturn \"Only owner/admin can promote\"","\t\t\tend","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'promote',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tpromote = get_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'promote' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal user_id = \"user#id\"..matches[2]","\t\t\t\tlocal get_cmd = 'promote'","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted user#id\"..matches[2])","\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})","\t\t\telseif matches[1] == 'promote' and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\tlocal cbres_extra = {","\t\t\t\t\tchannel = get_receiver(msg),","\t\t\t\t\tget_cmd = 'promote',","\t\t\t\t}","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] promoted @\"..username)","\t\t\t\treturn resolve_username(username, callbackres, cbres_extra)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'mp' and is_sudo(msg) then","\t\t\tchannel = get_receiver(msg)","\t\t\tuser_id = 'user#id'..matches[2]","\t\t\tchannel_set_mod(channel, user_id, ok_cb, false)","\t\t\treturn \"ok\"","\t\tend","\t\tif matches[1] == 'md' and is_sudo(msg) then","\t\t\tchannel = get_receiver(msg)","\t\t\tuser_id = 'user#id'..matches[2]","\t\t\tchannel_demote(channel, user_id, ok_cb, false)","\t\t\treturn \"ok\"","\t\tend","","\t\tif matches[1] == 'demote' then","\t\t\tif not is_momod(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tif not is_owner(msg) then","\t\t\t\treturn \"Only owner/support/admin can promote\"","\t\t\tend","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal cbreply_extra = {","\t\t\t\t\tget_cmd = 'demote',","\t\t\t\t\tmsg = msg","\t\t\t\t}","\t\t\t\tdemote = get_message(msg.reply_id, get_message_callback, cbreply_extra)","\t\t\telseif matches[1] == 'demote' and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal user_id = \"user#id\"..matches[2]","\t\t\t\tlocal get_cmd = 'demote'","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted user#id\"..matches[2])","\t\t\t\tuser_info(user_id, cb_user_info, {receiver = receiver, get_cmd = get_cmd})","\t\t\telseif matches[1] == 'demote' and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\tlocal cbres_extra = {","\t\t\t\t\tchannel = get_receiver(msg),","\t\t\t\t\tget_cmd = 'demote'","\t\t\t\t}","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] demoted @\"..username)","\t\t\t\treturn resolve_username(username, callbackres, cbres_extra)","\t\t\tend","\t\tend","","\t\tif matches[1] == \"setname\" and is_momod(msg) then","\t\t\tlocal receiver = get_receiver(msg)","\t\t\tlocal set_name = string.gsub(matches[2], '_', '')","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..matches[2])","\t\t\trename_channel(receiver, set_name, ok_cb, false)","\t\tend","","\t\tif msg.service and msg.action.type == 'chat_rename' then","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] renamed SuperGroup to: \"..msg.to.title)","\t\t\tdata[tostring(msg.to.id)]['settings']['set_name'] = msg.to.title","\t\t\tsave_data(_config.moderation.data, data)","\t\tend","","\t\tif matches[1] == \"setabout\" and is_momod(msg) then","\t\t\tlocal receiver = get_receiver(msg)","\t\t\tlocal about_text = matches[2]","\t\t\tlocal data_cat = 'description'","\t\t\tlocal target = msg.to.id","\t\t\tdata[tostring(target)][data_cat] = about_text","\t\t\tsave_data(_config.moderation.data, data)","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup description to: \"..about_text)","\t\t\tchannel_set_about(receiver, about_text, ok_cb, false)","\t\t\treturn \"Description has been set.\\n\\nSelect the chat again to see the changes.\"","\t\tend","","\t\tif matches[1] == \"setusername\" and is_admin1(msg) then","\t\t\tlocal function ok_username_cb (extra, success, result)","\t\t\t\tlocal receiver = extra.receiver","\t\t\t\tif success == 1 then","\t\t\t\t\tsend_large_msg(receiver, \"SuperGroup username Set.\\n\\nSelect the chat again to see the changes.\")","\t\t\t\telseif success == 0 then","\t\t\t\t\tsend_large_msg(receiver, \"Failed to set SuperGroup username.\\nUsername may already be taken.\\n\\nNote: Username can use a-z, 0-9 and underscores.\\nMinimum length is 5 characters.\")","\t\t\t\tend","\t\t\tend","\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\tchannel_set_username(receiver, username, ok_username_cb, {receiver=receiver})","\t\tend","","\t\tif matches[1] == 'setrules' and is_momod(msg) then","\t\t\trules = matches[2]","\t\t\tlocal target = msg.to.id","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] has changed group rules to [\"..matches[2]..\"]\")","\t\t\treturn set_rulesmod(msg, data, target)","\t\tend","","\t\tif msg.media then","\t\t\tif msg.media.type == 'photo' and data[tostring(msg.to.id)]['settings']['set_photo'] == 'waiting' and is_momod(msg) then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set new SuperGroup photo\")","\t\t\t\tload_photo(msg.id, set_supergroup_photo, msg)","\t\t\t\treturn","\t\t\tend","\t\tend","\t\tif matches[1] == 'setphoto' and is_momod(msg) then","\t\t\tdata[tostring(msg.to.id)]['settings']['set_photo'] = 'waiting'","\t\t\tsave_data(_config.moderation.data, data)","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] started setting new SuperGroup photo\")","\t\t\treturn 'Please send the new group photo now'","\t\tend","","\t\tif matches[1] == 'clean' then","\t\t\tif not is_momod(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tif not is_momod(msg) then","\t\t\t\treturn \"Only owner can clean\"","\t\t\tend","\t\t\tif matches[2] == 'modlist' then","\t\t\t\tif next(data[tostring(msg.to.id)]['moderators']) == nil then","\t\t\t\t\treturn 'No moderator(s) in this SuperGroup.'","\t\t\t\tend","\t\t\t\tfor k,v in pairs(data[tostring(msg.to.id)]['moderators']) do","\t\t\t\t\tdata[tostring(msg.to.id)]['moderators'][tostring(k)] = nil","\t\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\tend","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned modlist\")","\t\t\t\treturn 'Modlist has been cleaned'","\t\t\tend","\t\t\tif matches[2] == 'rules' then","\t\t\t\tlocal data_cat = 'rules'","\t\t\t\tif data[tostring(msg.to.id)][data_cat] == nil then","\t\t\t\t\treturn \"Rules have not been set\"","\t\t\t\tend","\t\t\t\tdata[tostring(msg.to.id)][data_cat] = nil","\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned rules\")","\t\t\t\treturn 'Rules have been cleaned'","\t\t\tend","\t\t\tif matches[2] == 'about' then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal about_text = ' '","\t\t\t\tlocal data_cat = 'description'","\t\t\t\tif data[tostring(msg.to.id)][data_cat] == nil then","\t\t\t\t\treturn 'About is not set'","\t\t\t\tend","\t\t\t\tdata[tostring(msg.to.id)][data_cat] = nil","\t\t\t\tsave_data(_config.moderation.data, data)","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] cleaned about\")","\t\t\t\tchannel_set_about(receiver, about_text, ok_cb, false)","\t\t\t\treturn \"About has been cleaned\"","\t\t\tend","\t\t\tif matches[2] == 'mutelist' then","\t\t\t\tchat_id = msg.to.id","\t\t\t\tlocal hash =  'mute_user:'..chat_id","\t\t\t\t\tredis:del(hash)","\t\t\t\treturn \"Mutelist Cleaned\"","\t\t\tend","\t\t\tif matches[2] == 'username' and is_admin1(msg) then","\t\t\t\tlocal function ok_username_cb (extra, success, result)","\t\t\t\t\tlocal receiver = extra.receiver","\t\t\t\t\tif success == 1 then","\t\t\t\t\t\tsend_large_msg(receiver, \"SuperGroup username cleaned.\")","\t\t\t\t\telseif success == 0 then","\t\t\t\t\t\tsend_large_msg(receiver, \"Failed to clean SuperGroup username.\")","\t\t\t\t\tend","\t\t\t\tend","\t\t\t\tlocal username = \"\"","\t\t\t\tchannel_set_username(receiver, username, ok_username_cb, {receiver=receiver})","\t\t\tend","\t\t\tif matches[2] == \"bots\" and is_momod(msg) then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] kicked all SuperGroup bots\")","\t\t\t\tchannel_get_bots(receiver, callback_clean_bots, {msg = msg})","\t\t\tend","\t\tend","","\t\tif matches[1] == 'lock' and is_momod(msg) then","\t\t\tlocal target = msg.to.id","\t\t\tif matches[2] == 'links' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked link posting \")","\t\t\t\treturn lock_group_links(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'spam' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked spam \")","\t\t\t\treturn lock_group_spam(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'flood' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked flood \")","\t\t\t\treturn lock_group_flood(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'arabic' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked arabic \")","\t\t\t\treturn lock_group_arabic(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'member' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked member \")","\t\t\t\treturn lock_group_membermod(msg, data, target)","\t\t\tend","\t\t\tif matches[2]:lower() == 'rtl' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked rtl chars. in names\")","\t\t\t\treturn lock_group_rtl(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'tgservice' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked Tgservice Actions\")","\t\t\t\treturn lock_group_tgservice(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'sticker' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked sticker posting\")","\t\t\t\treturn lock_group_sticker(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'contacts' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked contact posting\")","\t\t\t\treturn lock_group_contacts(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'strict' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked enabled strict settings\")","\t\t\t\treturn enable_strict_rules(msg, data, target)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'unlock' and is_momod(msg) then","\t\t\tlocal target = msg.to.id","\t\t\tif matches[2] == 'links' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked link posting\")","\t\t\t\treturn unlock_group_links(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'spam' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked spam\")","\t\t\t\treturn unlock_group_spam(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'flood' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked flood\")","\t\t\t\treturn unlock_group_flood(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'arabic' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked Arabic\")","\t\t\t\treturn unlock_group_arabic(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'member' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked member \")","\t\t\t\treturn unlock_group_membermod(msg, data, target)","\t\t\tend","\t\t\tif matches[2]:lower() == 'rtl' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked RTL chars. in names\")","\t\t\t\treturn unlock_group_rtl(msg, data, target)","\t\t\tend","\t\t\t\tif matches[2] == 'tgservice' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked tgservice actions\")","\t\t\t\treturn unlock_group_tgservice(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'sticker' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked sticker posting\")","\t\t\t\treturn unlock_group_sticker(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'contacts' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] unlocked contact posting\")","\t\t\t\treturn unlock_group_contacts(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'strict' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] locked disabled strict settings\")","\t\t\t\treturn disable_strict_rules(msg, data, target)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'setflood' then","\t\t\tif not is_momod(msg) then","\t\t\t\treturn","\t\t\tend","\t\t\tif tonumber(matches[2]) < 5 or tonumber(matches[2]) > 20 then","\t\t\t\treturn \"Wrong number,range is [5-20]\"","\t\t\tend","\t\t\tlocal flood_max = matches[2]","\t\t\tdata[tostring(msg.to.id)]['settings']['flood_msg_max'] = flood_max","\t\t\tsave_data(_config.moderation.data, data)","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set flood to [\"..matches[2]..\"]\")","\t\t\treturn 'Flood has been set to: '..matches[2]","\t\tend","\t\tif matches[1] == 'public' and is_momod(msg) then","\t\t\tlocal target = msg.to.id","\t\t\tif matches[2] == 'yes' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set group to: public\")","\t\t\t\treturn set_public_membermod(msg, data, target)","\t\t\tend","\t\t\tif matches[2] == 'no' then","\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: not public\")","\t\t\t\treturn unset_public_membermod(msg, data, target)","\t\t\tend","\t\tend","","\t\tif matches[1] == 'mute' and is_owner(msg) then","\t\t\tlocal chat_id = msg.to.id","\t\t\tif matches[2] == 'audio' then","\t\t\tlocal msg_type = 'Audio'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'photo' then","\t\t\tlocal msg_type = 'Photo'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'video' then","\t\t\tlocal msg_type = 'Video'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'gifs' then","\t\t\tlocal msg_type = 'Gifs'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" have been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'documents' then","\t\t\tlocal msg_type = 'Documents'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" have been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"SuperGroup mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'text' then","\t\t\tlocal msg_type = 'Text'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been muted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'all' then","\t\t\tlocal msg_type = 'All'","\t\t\t\tif not is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: mute \"..msg_type)","\t\t\t\t\tmute(chat_id, msg_type)","\t\t\t\t\treturn \"Mute \"..msg_type..\"  has been enabled\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already on\"","\t\t\t\tend","\t\t\tend","\t\tend","\t\tif matches[1] == 'unmute' and is_momod(msg) then","\t\t\tlocal chat_id = msg.to.id","\t\t\tif matches[2] == 'audio' then","\t\t\tlocal msg_type = 'Audio'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'photo' then","\t\t\tlocal msg_type = 'Photo'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'video' then","\t\t\tlocal msg_type = 'Video'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'gifs' then","\t\t\tlocal msg_type = 'Gifs'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" have been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'documents' then","\t\t\tlocal msg_type = 'Documents'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" have been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'text' then","\t\t\tlocal msg_type = 'Text'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute message\")","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn msg_type..\" has been unmuted\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute text is already off\"","\t\t\t\tend","\t\t\tend","\t\t\tif matches[2] == 'all' then","\t\t\tlocal msg_type = 'All'","\t\t\t\tif is_muted(chat_id, msg_type..': yes') then","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] set SuperGroup to: unmute \"..msg_type)","\t\t\t\t\tunmute(chat_id, msg_type)","\t\t\t\t\treturn \"Mute \"..msg_type..\" has been disabled\"","\t\t\t\telse","\t\t\t\t\treturn \"Mute \"..msg_type..\" is already disabled\"","\t\t\t\tend","\t\t\tend","\t\tend","","","\t\tif matches[1] == \"muteuser\" and is_momod(msg) then","\t\t\tlocal chat_id = msg.to.id","\t\t\tlocal hash = \"mute_user\"..chat_id","\t\t\tlocal user_id = \"\"","\t\t\tif type(msg.reply_id) ~= \"nil\" then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal get_cmd = \"mute_user\"","\t\t\t\tmuteuser = get_message(msg.reply_id, get_message_callback, {receiver = receiver, get_cmd = get_cmd, msg = msg})","\t\t\telseif matches[1] == \"muteuser\" and matches[2] and string.match(matches[2], '^%d+$') then","\t\t\t\tlocal user_id = matches[2]","\t\t\t\tif is_muted_user(chat_id, user_id) then","\t\t\t\t\tunmute_user(chat_id, user_id)","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] removed [\"..user_id..\"] from the muted users list\")","\t\t\t\t\treturn \"[\"..user_id..\"] removed from the muted users list\"","\t\t\t\telseif is_owner(msg) then","\t\t\t\t\tmute_user(chat_id, user_id)","\t\t\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] added [\"..user_id..\"] to the muted users list\")","\t\t\t\t\treturn \"[\"..user_id..\"] added to the muted user list\"","\t\t\t\tend","\t\t\telseif matches[1] == \"muteuser\" and matches[2] and not string.match(matches[2], '^%d+$') then","\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\tlocal get_cmd = \"mute_user\"","\t\t\t\tlocal username = matches[2]","\t\t\t\tlocal username = string.gsub(matches[2], '@', '')","\t\t\t\tresolve_username(username, callbackres, {receiver = receiver, get_cmd = get_cmd, msg=msg})","\t\t\tend","\t\tend","","\t\tif matches[1] == \"muteslist\" and is_momod(msg) then","\t\t\tlocal chat_id = msg.to.id","\t\t\tif not has_mutes(chat_id) then","\t\t\t\tset_mutes(chat_id)","\t\t\t\treturn mutes_list(chat_id)","\t\t\tend","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup muteslist\")","\t\t\treturn mutes_list(chat_id)","\t\tend","\t\tif matches[1] == \"mutelist\" and is_momod(msg) then","\t\t\tlocal chat_id = msg.to.id","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup mutelist\")","\t\t\treturn muted_user_list(chat_id)","\t\tend","","\t\tif matches[1] == 'settings' and is_momod(msg) then","\t\t\tlocal target = msg.to.id","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested SuperGroup settings \")","\t\t\treturn show_supergroup_settingsmod(msg, target)","\t\tend","","\t\tif matches[1] == 'rules' then","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] requested group rules\")","\t\t\treturn get_rules(msg, data)","\t\tend","","\t\tif matches[1] == 'help' and not is_owner(msg) then","\t\t\ttext = \"Message /superhelp to @Teleseed in private for SuperGroup help\"","\t\t\treply_msg(msg.id, text, ok_cb, false)","\t\telseif matches[1] == 'help' and is_owner(msg) then","\t\t\tlocal name_log = user_print_name(msg.from)","\t\t\tsavelog(msg.to.id, name_log..\" [\"..msg.from.id..\"] Used /superhelp\")","\t\t\treturn super_help()","\t\tend","","\t\tif matches[1] == 'peer_id' and is_admin1(msg)then","\t\t\ttext = msg.to.peer_id","\t\t\treply_msg(msg.id, text, ok_cb, false)","\t\t\tpost_large_msg(receiver, text)","\t\tend","","\t\tif matches[1] == 'msg.to.id' and is_admin1(msg) then","\t\t\ttext = msg.to.id","\t\t\treply_msg(msg.id, text, ok_cb, false)","\t\t\tpost_large_msg(receiver, text)","\t\tend","","\t\t--Admin Join Service Message","\t\tif msg.service then","\t\tlocal action = msg.action.type","\t\t\tif action == 'chat_add_user_link' then","\t\t\t\tif is_owner2(msg.from.id) then","\t\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\t\tlocal user = \"user#id\"..msg.from.id","\t\t\t\t\tsavelog(msg.to.id, name_log..\" Admin [\"..msg.from.id..\"] joined the SuperGroup via link\")","\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\t\tif is_support(msg.from.id) and not is_owner2(msg.from.id) then","\t\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\t\tlocal user = \"user#id\"..msg.from.id","\t\t\t\t\tsavelog(msg.to.id, name_log..\" Support member [\"..msg.from.id..\"] joined the SuperGroup\")","\t\t\t\t\tchannel_set_mod(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\tend","\t\t\tif action == 'chat_add_user' then","\t\t\t\tif is_owner2(msg.action.user.id) then","\t\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\t\tlocal user = \"user#id\"..msg.action.user.id","\t\t\t\t\tsavelog(msg.to.id, name_log..\" Admin [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\")","\t\t\t\t\tchannel_set_admin(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\t\tif is_support(msg.action.user.id) and not is_owner2(msg.action.user.id) then","\t\t\t\t\tlocal receiver = get_receiver(msg)","\t\t\t\t\tlocal user = \"user#id\"..msg.action.user.id","\t\t\t\t\tsavelog(msg.to.id, name_log..\" Support member [\"..msg.action.user.id..\"] added to the SuperGroup by [ \"..msg.from.id..\" ]\")","\t\t\t\t\tchannel_set_mod(receiver, user, ok_cb, false)","\t\t\t\tend","\t\t\tend","\t\tend","\t\tif matches[1] == 'msg.to.peer_id' then","\t\t\tpost_large_msg(receiver, msg.to.peer_id)","\t\tend","\tend","end","","local function pre_process(msg)","  if not msg.text and msg.media then","    msg.text = '['..msg.media.type..']'","  end","  return msg","end","","return {","  patterns = {","\t\"^[#!/]([Aa]dd)$\",","\t\"^[#!/]([Rr]em)$\",","\t\"^[#!/]([Mm]ove) (.*)$\",","\t\"^[#!/]([Ii]nfo)$\",","\t\"^[#!/]([Aa]dmins)$\",","\t\"^[#!/]([Oo]wner)$\",","\t\"^[#!/]([Mm]odlist)$\",","\t\"^[#!/]([Bb]ots)$\",","\t\"^[#!/]([Ww]ho)$\",","\t\"^[#!/]([Kk]icked)$\",","    \"^[#!/]([Bb]lock) (.*)\",","\t\"^[#!/]([Bb]lock)\",","\t\"^[#!/]([Tt]osuper)$\",","\t\"^[#!/]([Ii][Dd])$\",","\t\"^[#!/]([Ii][Dd]) (.*)$\",","\t\"^[#!/]([Kk]ickme)$\",","\t\"^[#!/]([Kk]ick) (.*)$\",","\t\"^[#!/]([Nn]ewlink)$\",","\t\"^[#!/]([Ss]etlink)$\",","\t\"^[#!/]([Ll]ink)$\",","\t\"^[#!/]([Rr]es) (.*)$\",","\t\"^[#!/]([Ss]etadmin) (.*)$\",","\t\"^[#!/]([Ss]etadmin)\",","\t\"^[#!/]([Dd]emoteadmin) (.*)$\",","\t\"^[#!/]([Dd]emoteadmin)\",","\t\"^[#!/]([Ss]etowner) (.*)$\",","\t\"^[#!/]([Ss]etowner)$\",","\t\"^[#!/]([Pp]romote) (.*)$\",","\t\"^[#!/]([Pp]romote)\",","\t\"^[#!/]([Dd]emote) (.*)$\",","\t\"^[#!/]([Dd]emote)\",","\t\"^[#!/]([Ss]etname) (.*)$\",","\t\"^[#!/]([Ss]etabout) (.*)$\",","\t\"^[#!/]([Ss]etrules) (.*)$\",","\t\"^[#!/]([Ss]etphoto)$\",","\t\"^[#!/]([Ss]etusername) (.*)$\",","\t\"^[#!/]([Dd]el)$\",","\t\"^[#!/]([Ll]ock) (.*)$\",","\t\"^[#!/]([Uu]nlock) (.*)$\",","\t\"^[#!/]([Mm]ute) ([^%s]+)$\",","\t\"^[#!/]([Uu]nmute) ([^%s]+)$\",","\t\"^[#!/]([Mm]uteuser)$\",","\t\"^[#!/]([Mm]uteuser) (.*)$\",","\t\"^[#!/]([Pp]ublic) (.*)$\",","\t\"^[#!/]([Ss]ettings)$\",","\t\"^[#!/]([Rr]ules)$\",","\t\"^[#!/]([Ss]etflood) (%d+)$\",","\t\"^[#!/]([Cc]lean) (.*)$\",","\t\"^[#!/]([Hh]elp)$\",","\t\"^[#!/]([Mm]uteslist)$\",","\t\"^[#!/]([Mm]utelist)$\",","    \"[#!/](mp) (.*)\",","\t\"[#!/](md) (.*)\",","    \"^(https://telegram.me/joinchat/%S+)$\",","\t\"msg.to.peer_id\",","\t\"%[(document)%]\",","\t\"%[(photo)%]\",","\t\"%[(video)%]\",","\t\"%[(audio)%]\",","\t\"%[(contact)%]\",","\t\"^!!tgservice (.+)$\",","  },","  run = run,","  pre_process = pre_process","}","--End supergrpup.lua","--By @Rondoozle",""]}]]},"ace":{"folds":[],"scrolltop":28034,"scrollleft":0,"selection":{"start":{"row":2100,"column":0},"end":{"row":2100,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2001,"state":"start","mode":"ace/mode/lua"}},"timestamp":1463206981474}